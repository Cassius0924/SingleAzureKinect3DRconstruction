// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DataMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DataMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Mesh.pb.h"
#include "SoundSource.pb.h"
#include "Temperature.pb.h"
#include "BotCar.pb.h"
#include "BotGripper.pb.h"
#include "BotMotor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DataMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DataMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DataMessage_2eproto;
namespace cas {
namespace proto {
class DataMessage;
struct DataMessageDefaultTypeInternal;
extern DataMessageDefaultTypeInternal _DataMessage_default_instance_;
}  // namespace proto
}  // namespace cas
PROTOBUF_NAMESPACE_OPEN
template<> ::cas::proto::DataMessage* Arena::CreateMaybeMessage<::cas::proto::DataMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cas {
namespace proto {

enum DataMessage_Type : int {
  DataMessage_Type_MESH = 0,
  DataMessage_Type_SOUND_SOURCE = 1,
  DataMessage_Type_TEMPERATURE = 2,
  DataMessage_Type_BOT_CAR = 3,
  DataMessage_Type_BOT_GRIPPER = 4,
  DataMessage_Type_BOT_MOTOR = 5,
  DataMessage_Type_DataMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataMessage_Type_DataMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataMessage_Type_IsValid(int value);
constexpr DataMessage_Type DataMessage_Type_Type_MIN = DataMessage_Type_MESH;
constexpr DataMessage_Type DataMessage_Type_Type_MAX = DataMessage_Type_BOT_MOTOR;
constexpr int DataMessage_Type_Type_ARRAYSIZE = DataMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataMessage_Type_descriptor();
template<typename T>
inline const std::string& DataMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataMessage_Type_descriptor(), enum_t_value);
}
inline bool DataMessage_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataMessage_Type>(
    DataMessage_Type_descriptor(), name, value);
}
// ===================================================================

class DataMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cas.proto.DataMessage) */ {
 public:
  inline DataMessage() : DataMessage(nullptr) {}
  ~DataMessage() override;
  explicit constexpr DataMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataMessage(const DataMessage& from);
  DataMessage(DataMessage&& from) noexcept
    : DataMessage() {
    *this = ::std::move(from);
  }

  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMessage& operator=(DataMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMessage& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kMesh = 2,
    kSoundSource = 3,
    kTemperature = 4,
    kBotCar = 5,
    kBotGripper = 6,
    kBotMotor = 7,
    DATA_NOT_SET = 0,
  };

  static inline const DataMessage* internal_default_instance() {
    return reinterpret_cast<const DataMessage*>(
               &_DataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataMessage& a, DataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cas.proto.DataMessage";
  }
  protected:
  explicit DataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataMessage_Type Type;
  static constexpr Type MESH =
    DataMessage_Type_MESH;
  static constexpr Type SOUND_SOURCE =
    DataMessage_Type_SOUND_SOURCE;
  static constexpr Type TEMPERATURE =
    DataMessage_Type_TEMPERATURE;
  static constexpr Type BOT_CAR =
    DataMessage_Type_BOT_CAR;
  static constexpr Type BOT_GRIPPER =
    DataMessage_Type_BOT_GRIPPER;
  static constexpr Type BOT_MOTOR =
    DataMessage_Type_BOT_MOTOR;
  static inline bool Type_IsValid(int value) {
    return DataMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    DataMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    DataMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    DataMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return DataMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return DataMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return DataMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMeshFieldNumber = 2,
    kSoundSourceFieldNumber = 3,
    kTemperatureFieldNumber = 4,
    kBotCarFieldNumber = 5,
    kBotGripperFieldNumber = 6,
    kBotMotorFieldNumber = 7,
  };
  // .cas.proto.DataMessage.Type type = 1;
  void clear_type();
  ::cas::proto::DataMessage_Type type() const;
  void set_type(::cas::proto::DataMessage_Type value);
  private:
  ::cas::proto::DataMessage_Type _internal_type() const;
  void _internal_set_type(::cas::proto::DataMessage_Type value);
  public:

  // .cas.proto.Mesh mesh = 2;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::cas::proto::Mesh& mesh() const;
  PROTOBUF_NODISCARD ::cas::proto::Mesh* release_mesh();
  ::cas::proto::Mesh* mutable_mesh();
  void set_allocated_mesh(::cas::proto::Mesh* mesh);
  private:
  const ::cas::proto::Mesh& _internal_mesh() const;
  ::cas::proto::Mesh* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::cas::proto::Mesh* mesh);
  ::cas::proto::Mesh* unsafe_arena_release_mesh();

  // .cas.proto.SoundSource sound_source = 3;
  bool has_sound_source() const;
  private:
  bool _internal_has_sound_source() const;
  public:
  void clear_sound_source();
  const ::cas::proto::SoundSource& sound_source() const;
  PROTOBUF_NODISCARD ::cas::proto::SoundSource* release_sound_source();
  ::cas::proto::SoundSource* mutable_sound_source();
  void set_allocated_sound_source(::cas::proto::SoundSource* sound_source);
  private:
  const ::cas::proto::SoundSource& _internal_sound_source() const;
  ::cas::proto::SoundSource* _internal_mutable_sound_source();
  public:
  void unsafe_arena_set_allocated_sound_source(
      ::cas::proto::SoundSource* sound_source);
  ::cas::proto::SoundSource* unsafe_arena_release_sound_source();

  // .cas.proto.Temperature temperature = 4;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  const ::cas::proto::Temperature& temperature() const;
  PROTOBUF_NODISCARD ::cas::proto::Temperature* release_temperature();
  ::cas::proto::Temperature* mutable_temperature();
  void set_allocated_temperature(::cas::proto::Temperature* temperature);
  private:
  const ::cas::proto::Temperature& _internal_temperature() const;
  ::cas::proto::Temperature* _internal_mutable_temperature();
  public:
  void unsafe_arena_set_allocated_temperature(
      ::cas::proto::Temperature* temperature);
  ::cas::proto::Temperature* unsafe_arena_release_temperature();

  // .cas.proto.BotCar bot_car = 5;
  bool has_bot_car() const;
  private:
  bool _internal_has_bot_car() const;
  public:
  void clear_bot_car();
  const ::cas::proto::BotCar& bot_car() const;
  PROTOBUF_NODISCARD ::cas::proto::BotCar* release_bot_car();
  ::cas::proto::BotCar* mutable_bot_car();
  void set_allocated_bot_car(::cas::proto::BotCar* bot_car);
  private:
  const ::cas::proto::BotCar& _internal_bot_car() const;
  ::cas::proto::BotCar* _internal_mutable_bot_car();
  public:
  void unsafe_arena_set_allocated_bot_car(
      ::cas::proto::BotCar* bot_car);
  ::cas::proto::BotCar* unsafe_arena_release_bot_car();

  // .cas.proto.BotGripper bot_gripper = 6;
  bool has_bot_gripper() const;
  private:
  bool _internal_has_bot_gripper() const;
  public:
  void clear_bot_gripper();
  const ::cas::proto::BotGripper& bot_gripper() const;
  PROTOBUF_NODISCARD ::cas::proto::BotGripper* release_bot_gripper();
  ::cas::proto::BotGripper* mutable_bot_gripper();
  void set_allocated_bot_gripper(::cas::proto::BotGripper* bot_gripper);
  private:
  const ::cas::proto::BotGripper& _internal_bot_gripper() const;
  ::cas::proto::BotGripper* _internal_mutable_bot_gripper();
  public:
  void unsafe_arena_set_allocated_bot_gripper(
      ::cas::proto::BotGripper* bot_gripper);
  ::cas::proto::BotGripper* unsafe_arena_release_bot_gripper();

  // .cas.proto.BotMotor bot_motor = 7;
  bool has_bot_motor() const;
  private:
  bool _internal_has_bot_motor() const;
  public:
  void clear_bot_motor();
  const ::cas::proto::BotMotor& bot_motor() const;
  PROTOBUF_NODISCARD ::cas::proto::BotMotor* release_bot_motor();
  ::cas::proto::BotMotor* mutable_bot_motor();
  void set_allocated_bot_motor(::cas::proto::BotMotor* bot_motor);
  private:
  const ::cas::proto::BotMotor& _internal_bot_motor() const;
  ::cas::proto::BotMotor* _internal_mutable_bot_motor();
  public:
  void unsafe_arena_set_allocated_bot_motor(
      ::cas::proto::BotMotor* bot_motor);
  ::cas::proto::BotMotor* unsafe_arena_release_bot_motor();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:cas.proto.DataMessage)
 private:
  class _Internal;
  void set_has_mesh();
  void set_has_sound_source();
  void set_has_temperature();
  void set_has_bot_car();
  void set_has_bot_gripper();
  void set_has_bot_motor();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::cas::proto::Mesh* mesh_;
    ::cas::proto::SoundSource* sound_source_;
    ::cas::proto::Temperature* temperature_;
    ::cas::proto::BotCar* bot_car_;
    ::cas::proto::BotGripper* bot_gripper_;
    ::cas::proto::BotMotor* bot_motor_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_DataMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataMessage

// .cas.proto.DataMessage.Type type = 1;
inline void DataMessage::clear_type() {
  type_ = 0;
}
inline ::cas::proto::DataMessage_Type DataMessage::_internal_type() const {
  return static_cast< ::cas::proto::DataMessage_Type >(type_);
}
inline ::cas::proto::DataMessage_Type DataMessage::type() const {
  // @@protoc_insertion_point(field_get:cas.proto.DataMessage.type)
  return _internal_type();
}
inline void DataMessage::_internal_set_type(::cas::proto::DataMessage_Type value) {
  
  type_ = value;
}
inline void DataMessage::set_type(::cas::proto::DataMessage_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cas.proto.DataMessage.type)
}

// .cas.proto.Mesh mesh = 2;
inline bool DataMessage::_internal_has_mesh() const {
  return data_case() == kMesh;
}
inline bool DataMessage::has_mesh() const {
  return _internal_has_mesh();
}
inline void DataMessage::set_has_mesh() {
  _oneof_case_[0] = kMesh;
}
inline ::cas::proto::Mesh* DataMessage::release_mesh() {
  // @@protoc_insertion_point(field_release:cas.proto.DataMessage.mesh)
  if (_internal_has_mesh()) {
    clear_has_data();
      ::cas::proto::Mesh* temp = data_.mesh_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cas::proto::Mesh& DataMessage::_internal_mesh() const {
  return _internal_has_mesh()
      ? *data_.mesh_
      : reinterpret_cast< ::cas::proto::Mesh&>(::cas::proto::_Mesh_default_instance_);
}
inline const ::cas::proto::Mesh& DataMessage::mesh() const {
  // @@protoc_insertion_point(field_get:cas.proto.DataMessage.mesh)
  return _internal_mesh();
}
inline ::cas::proto::Mesh* DataMessage::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cas.proto.DataMessage.mesh)
  if (_internal_has_mesh()) {
    clear_has_data();
    ::cas::proto::Mesh* temp = data_.mesh_;
    data_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataMessage::unsafe_arena_set_allocated_mesh(::cas::proto::Mesh* mesh) {
  clear_data();
  if (mesh) {
    set_has_mesh();
    data_.mesh_ = mesh;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cas.proto.DataMessage.mesh)
}
inline ::cas::proto::Mesh* DataMessage::_internal_mutable_mesh() {
  if (!_internal_has_mesh()) {
    clear_data();
    set_has_mesh();
    data_.mesh_ = CreateMaybeMessage< ::cas::proto::Mesh >(GetArenaForAllocation());
  }
  return data_.mesh_;
}
inline ::cas::proto::Mesh* DataMessage::mutable_mesh() {
  ::cas::proto::Mesh* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:cas.proto.DataMessage.mesh)
  return _msg;
}

// .cas.proto.SoundSource sound_source = 3;
inline bool DataMessage::_internal_has_sound_source() const {
  return data_case() == kSoundSource;
}
inline bool DataMessage::has_sound_source() const {
  return _internal_has_sound_source();
}
inline void DataMessage::set_has_sound_source() {
  _oneof_case_[0] = kSoundSource;
}
inline ::cas::proto::SoundSource* DataMessage::release_sound_source() {
  // @@protoc_insertion_point(field_release:cas.proto.DataMessage.sound_source)
  if (_internal_has_sound_source()) {
    clear_has_data();
      ::cas::proto::SoundSource* temp = data_.sound_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.sound_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cas::proto::SoundSource& DataMessage::_internal_sound_source() const {
  return _internal_has_sound_source()
      ? *data_.sound_source_
      : reinterpret_cast< ::cas::proto::SoundSource&>(::cas::proto::_SoundSource_default_instance_);
}
inline const ::cas::proto::SoundSource& DataMessage::sound_source() const {
  // @@protoc_insertion_point(field_get:cas.proto.DataMessage.sound_source)
  return _internal_sound_source();
}
inline ::cas::proto::SoundSource* DataMessage::unsafe_arena_release_sound_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cas.proto.DataMessage.sound_source)
  if (_internal_has_sound_source()) {
    clear_has_data();
    ::cas::proto::SoundSource* temp = data_.sound_source_;
    data_.sound_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataMessage::unsafe_arena_set_allocated_sound_source(::cas::proto::SoundSource* sound_source) {
  clear_data();
  if (sound_source) {
    set_has_sound_source();
    data_.sound_source_ = sound_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cas.proto.DataMessage.sound_source)
}
inline ::cas::proto::SoundSource* DataMessage::_internal_mutable_sound_source() {
  if (!_internal_has_sound_source()) {
    clear_data();
    set_has_sound_source();
    data_.sound_source_ = CreateMaybeMessage< ::cas::proto::SoundSource >(GetArenaForAllocation());
  }
  return data_.sound_source_;
}
inline ::cas::proto::SoundSource* DataMessage::mutable_sound_source() {
  ::cas::proto::SoundSource* _msg = _internal_mutable_sound_source();
  // @@protoc_insertion_point(field_mutable:cas.proto.DataMessage.sound_source)
  return _msg;
}

// .cas.proto.Temperature temperature = 4;
inline bool DataMessage::_internal_has_temperature() const {
  return data_case() == kTemperature;
}
inline bool DataMessage::has_temperature() const {
  return _internal_has_temperature();
}
inline void DataMessage::set_has_temperature() {
  _oneof_case_[0] = kTemperature;
}
inline ::cas::proto::Temperature* DataMessage::release_temperature() {
  // @@protoc_insertion_point(field_release:cas.proto.DataMessage.temperature)
  if (_internal_has_temperature()) {
    clear_has_data();
      ::cas::proto::Temperature* temp = data_.temperature_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.temperature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cas::proto::Temperature& DataMessage::_internal_temperature() const {
  return _internal_has_temperature()
      ? *data_.temperature_
      : reinterpret_cast< ::cas::proto::Temperature&>(::cas::proto::_Temperature_default_instance_);
}
inline const ::cas::proto::Temperature& DataMessage::temperature() const {
  // @@protoc_insertion_point(field_get:cas.proto.DataMessage.temperature)
  return _internal_temperature();
}
inline ::cas::proto::Temperature* DataMessage::unsafe_arena_release_temperature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cas.proto.DataMessage.temperature)
  if (_internal_has_temperature()) {
    clear_has_data();
    ::cas::proto::Temperature* temp = data_.temperature_;
    data_.temperature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataMessage::unsafe_arena_set_allocated_temperature(::cas::proto::Temperature* temperature) {
  clear_data();
  if (temperature) {
    set_has_temperature();
    data_.temperature_ = temperature;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cas.proto.DataMessage.temperature)
}
inline ::cas::proto::Temperature* DataMessage::_internal_mutable_temperature() {
  if (!_internal_has_temperature()) {
    clear_data();
    set_has_temperature();
    data_.temperature_ = CreateMaybeMessage< ::cas::proto::Temperature >(GetArenaForAllocation());
  }
  return data_.temperature_;
}
inline ::cas::proto::Temperature* DataMessage::mutable_temperature() {
  ::cas::proto::Temperature* _msg = _internal_mutable_temperature();
  // @@protoc_insertion_point(field_mutable:cas.proto.DataMessage.temperature)
  return _msg;
}

// .cas.proto.BotCar bot_car = 5;
inline bool DataMessage::_internal_has_bot_car() const {
  return data_case() == kBotCar;
}
inline bool DataMessage::has_bot_car() const {
  return _internal_has_bot_car();
}
inline void DataMessage::set_has_bot_car() {
  _oneof_case_[0] = kBotCar;
}
inline ::cas::proto::BotCar* DataMessage::release_bot_car() {
  // @@protoc_insertion_point(field_release:cas.proto.DataMessage.bot_car)
  if (_internal_has_bot_car()) {
    clear_has_data();
      ::cas::proto::BotCar* temp = data_.bot_car_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.bot_car_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cas::proto::BotCar& DataMessage::_internal_bot_car() const {
  return _internal_has_bot_car()
      ? *data_.bot_car_
      : reinterpret_cast< ::cas::proto::BotCar&>(::cas::proto::_BotCar_default_instance_);
}
inline const ::cas::proto::BotCar& DataMessage::bot_car() const {
  // @@protoc_insertion_point(field_get:cas.proto.DataMessage.bot_car)
  return _internal_bot_car();
}
inline ::cas::proto::BotCar* DataMessage::unsafe_arena_release_bot_car() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cas.proto.DataMessage.bot_car)
  if (_internal_has_bot_car()) {
    clear_has_data();
    ::cas::proto::BotCar* temp = data_.bot_car_;
    data_.bot_car_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataMessage::unsafe_arena_set_allocated_bot_car(::cas::proto::BotCar* bot_car) {
  clear_data();
  if (bot_car) {
    set_has_bot_car();
    data_.bot_car_ = bot_car;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cas.proto.DataMessage.bot_car)
}
inline ::cas::proto::BotCar* DataMessage::_internal_mutable_bot_car() {
  if (!_internal_has_bot_car()) {
    clear_data();
    set_has_bot_car();
    data_.bot_car_ = CreateMaybeMessage< ::cas::proto::BotCar >(GetArenaForAllocation());
  }
  return data_.bot_car_;
}
inline ::cas::proto::BotCar* DataMessage::mutable_bot_car() {
  ::cas::proto::BotCar* _msg = _internal_mutable_bot_car();
  // @@protoc_insertion_point(field_mutable:cas.proto.DataMessage.bot_car)
  return _msg;
}

// .cas.proto.BotGripper bot_gripper = 6;
inline bool DataMessage::_internal_has_bot_gripper() const {
  return data_case() == kBotGripper;
}
inline bool DataMessage::has_bot_gripper() const {
  return _internal_has_bot_gripper();
}
inline void DataMessage::set_has_bot_gripper() {
  _oneof_case_[0] = kBotGripper;
}
inline ::cas::proto::BotGripper* DataMessage::release_bot_gripper() {
  // @@protoc_insertion_point(field_release:cas.proto.DataMessage.bot_gripper)
  if (_internal_has_bot_gripper()) {
    clear_has_data();
      ::cas::proto::BotGripper* temp = data_.bot_gripper_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.bot_gripper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cas::proto::BotGripper& DataMessage::_internal_bot_gripper() const {
  return _internal_has_bot_gripper()
      ? *data_.bot_gripper_
      : reinterpret_cast< ::cas::proto::BotGripper&>(::cas::proto::_BotGripper_default_instance_);
}
inline const ::cas::proto::BotGripper& DataMessage::bot_gripper() const {
  // @@protoc_insertion_point(field_get:cas.proto.DataMessage.bot_gripper)
  return _internal_bot_gripper();
}
inline ::cas::proto::BotGripper* DataMessage::unsafe_arena_release_bot_gripper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cas.proto.DataMessage.bot_gripper)
  if (_internal_has_bot_gripper()) {
    clear_has_data();
    ::cas::proto::BotGripper* temp = data_.bot_gripper_;
    data_.bot_gripper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataMessage::unsafe_arena_set_allocated_bot_gripper(::cas::proto::BotGripper* bot_gripper) {
  clear_data();
  if (bot_gripper) {
    set_has_bot_gripper();
    data_.bot_gripper_ = bot_gripper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cas.proto.DataMessage.bot_gripper)
}
inline ::cas::proto::BotGripper* DataMessage::_internal_mutable_bot_gripper() {
  if (!_internal_has_bot_gripper()) {
    clear_data();
    set_has_bot_gripper();
    data_.bot_gripper_ = CreateMaybeMessage< ::cas::proto::BotGripper >(GetArenaForAllocation());
  }
  return data_.bot_gripper_;
}
inline ::cas::proto::BotGripper* DataMessage::mutable_bot_gripper() {
  ::cas::proto::BotGripper* _msg = _internal_mutable_bot_gripper();
  // @@protoc_insertion_point(field_mutable:cas.proto.DataMessage.bot_gripper)
  return _msg;
}

// .cas.proto.BotMotor bot_motor = 7;
inline bool DataMessage::_internal_has_bot_motor() const {
  return data_case() == kBotMotor;
}
inline bool DataMessage::has_bot_motor() const {
  return _internal_has_bot_motor();
}
inline void DataMessage::set_has_bot_motor() {
  _oneof_case_[0] = kBotMotor;
}
inline ::cas::proto::BotMotor* DataMessage::release_bot_motor() {
  // @@protoc_insertion_point(field_release:cas.proto.DataMessage.bot_motor)
  if (_internal_has_bot_motor()) {
    clear_has_data();
      ::cas::proto::BotMotor* temp = data_.bot_motor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.bot_motor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cas::proto::BotMotor& DataMessage::_internal_bot_motor() const {
  return _internal_has_bot_motor()
      ? *data_.bot_motor_
      : reinterpret_cast< ::cas::proto::BotMotor&>(::cas::proto::_BotMotor_default_instance_);
}
inline const ::cas::proto::BotMotor& DataMessage::bot_motor() const {
  // @@protoc_insertion_point(field_get:cas.proto.DataMessage.bot_motor)
  return _internal_bot_motor();
}
inline ::cas::proto::BotMotor* DataMessage::unsafe_arena_release_bot_motor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cas.proto.DataMessage.bot_motor)
  if (_internal_has_bot_motor()) {
    clear_has_data();
    ::cas::proto::BotMotor* temp = data_.bot_motor_;
    data_.bot_motor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataMessage::unsafe_arena_set_allocated_bot_motor(::cas::proto::BotMotor* bot_motor) {
  clear_data();
  if (bot_motor) {
    set_has_bot_motor();
    data_.bot_motor_ = bot_motor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cas.proto.DataMessage.bot_motor)
}
inline ::cas::proto::BotMotor* DataMessage::_internal_mutable_bot_motor() {
  if (!_internal_has_bot_motor()) {
    clear_data();
    set_has_bot_motor();
    data_.bot_motor_ = CreateMaybeMessage< ::cas::proto::BotMotor >(GetArenaForAllocation());
  }
  return data_.bot_motor_;
}
inline ::cas::proto::BotMotor* DataMessage::mutable_bot_motor() {
  ::cas::proto::BotMotor* _msg = _internal_mutable_bot_motor();
  // @@protoc_insertion_point(field_mutable:cas.proto.DataMessage.bot_motor)
  return _msg;
}

inline bool DataMessage::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void DataMessage::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline DataMessage::DataCase DataMessage::data_case() const {
  return DataMessage::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cas

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cas::proto::DataMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cas::proto::DataMessage_Type>() {
  return ::cas::proto::DataMessage_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DataMessage_2eproto
