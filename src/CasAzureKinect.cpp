//
// Created by Cassius0924 on 4/30/23.
//

#include "CasAzureKinect.h"

#include <Eigen/Core>
#include <Eigen/Dense>
#include <alsa/asoundlib.h>
#include <cmath>
#include <complex>
#include <fftw3.h>
#include <iostream>
#include <numeric>
#include <vector>

#define MICROPHONE_NAME "plughw:2,0"// 麦克风名称：声卡2的0号设备
#define WINDOW_SIZE 1024            // 窗口大小

using namespace std;

bool cas::kinect::checkKinectNum(int num) {
    const uint32_t device_count = k4a::device::get_installed_count();
    if (0 == device_count) {
        cerr << "错误：没有发现 K4A 设备。" << endl;
        return false;
    } else {
        cout << "发现 " << device_count << " 个已连接的设备。" << endl;
        if (1 != device_count) {// 超过1个设备，也输出错误信息。
            cerr << "错误：发现多个 K4A 设备。" << endl;
            return false;
        } else {
            cout << "发现 1 个 K4A 设备。" << endl;
        }
    }
    return true;
}

bool cas::kinect::stabilizeCamera(k4a::device &device) {
    k4a::capture capture;
    int i_auto = 0;      // 用来稳定，类似自动曝光
    int i_auto_error = 0;// 统计自动曝光的失败次数
    while (true) {
        if (device.get_capture(&capture)) {
            cout << i_auto << " 稳定相机，用于自动曝光" << endl;
            // 跳过前 n 个（成功的数据采集）循环，用来稳定
            if (i_auto != 30) {
                i_auto++;
                continue;
            } else {
                cout << "自动曝光完成" << endl;
                break;// 跳出该循环，完成相机的稳定过程
            }
        } else {
            cerr << i_auto_error << "自动曝光失败" << endl;
            if (i_auto_error != 30) {
                i_auto_error++;
                continue;
            } else {
                cerr << "错误：无法自动曝光。" << endl;
                return false;
            }
        }
    }
    return true;
}

// 分帧
void enframeChannel(double *data, int channel_size, int frame_length, int overlap, double **frames_enframe) {
    int step_length = frame_length - overlap;              // 步长
    int frame_num = (channel_size - overlap) / step_length;// 帧数

    for (int i = 0; i < frame_num; i++) {
        int start = i * step_length;
        int end = start + frame_length - 1;
        // 将数组中从 start 到 end 的元素赋值给 frames_enframe 数组的第 i 行
        for (int j = start; j <= end; j++) {
            frames_enframe[i][j - start] = data[j];//用一个for循环即可
        }
    }
}

// 位逆序置换
void trans(complex<double> *&x, int size_x) {
    int p = 0;
    int a, b;
    for (int i = 1; i < size_x; i *= 2) {
        p++;//计算二进制位数
    }
    for (int i = 0; i < size_x; i++) {
        a = i;
        b = 0;
        for (int j = 0; j < p; j++) {
            b = (b << 1) + (a & 1);//b存储当前下标的回文值
            a = a >> 1;
        }
        if (b > i)//避免重复交换
        {
            complex<double> temp;
            temp = x[i];
            x[i] = x[b];
            x[b] = temp;
        }
    }
}

//快速傅里叶变换
void fft(complex<double> *&x, int size, complex<double> *&X) {
    complex<double> wn[WINDOW_SIZE];
    for (int i = 0; i < size; i++) {
        X[i] = x[i];
        double real = cos(-2 * M_PI * i / size);
        double img = sin(-2 * M_PI * i / size);
        wn[i] = complex<double>(real, img);//初始化Wn
    }
    complex<double> *p = X;
    trans(p, size);//位反转置换
    int t;
    for (int m = 2; m <= size; m *= 2)//小序列点数
    {
        for (int k = 0; k < size; k += m)//小序列起始下标
        {
            for (int j = 0; j < m / 2; j++)//小序列的DFT计算
            {
                int index1 = k + j;
                int index2 = index1 + m / 2;
                t = j * size / m;//t是在完整序列中的下标，找到对应的旋转因子
                complex<double> temp1, temp2;
                temp2 = X[index2] * wn[t];
                temp1 = X[index1];
                X[index1] = temp1 + temp2;//Wn的性质
                X[index2] = temp1 - temp2;
            }
        }
    }
}

int nextpow2(int x) {// 计算大于等于 x 的最小的 2 的幂
    int i = 0;
    while (pow(2, i) < x) {
        i++;
    }
    return pow(2, i);
}

// void gccPhat(double *frames_enframe1, double *frames_enframe2, int frame_length, vector<complex<double>> &y) {
void gccPhat(double *frames_enframe1, double *frames_enframe2, int frame_length, Eigen::Ref<Eigen::VectorXd, 0, Eigen::InnerStride<>> y) {
    int ncorr = 2 * frame_length - 1;
    int nfft = nextpow2(ncorr);

    //计算GCC-PHAT
    //Gss = fft(x1, NFFT).*conj(fft(x2, NFFT));                 % 计算互功率谱      fft:快速傅立叶变换， 将一个信号变换到频域     conj: 计算复数的共轭值
    // complex<double> *x1 = new complex<double>[nfft];
    // complex<double> *x2 = new complex<double>[nfft];
    // complex<double> *fx1 = new complex<double>[nfft];
    // complex<double> *fx2 = new complex<double>[nfft];

    fftw_complex *in1, *in2, *out1, *out2, *out3;
    fftw_plan p1, p2, p3;

    in1 = (fftw_complex *) fftw_malloc(sizeof(fftw_complex) * nfft);
    in2 = (fftw_complex *) fftw_malloc(sizeof(fftw_complex) * nfft);
    out1 = (fftw_complex *) fftw_malloc(sizeof(fftw_complex) * nfft);
    out2 = (fftw_complex *) fftw_malloc(sizeof(fftw_complex) * nfft);

    //short** 转换为 complex<double>*
    // for (int i = 0; i < frame_length; i++) {
    //     x1[i] = complex<double>(frames_enframe1[i], 0);
    //     x2[i] = complex<double>(frames_enframe2[i], 0);
    // }

    // fft(x1, nfft, fx1);
    // fft(x2, nfft, fx2);

    for (int i = 0; i < frame_length; i++) {
        in1[i][0] = frames_enframe1[i];
        in1[i][1] = 0;
        in2[i][0] = frames_enframe2[i];
        in2[i][1] = 0;
    }
    for (int i = frame_length; i < nfft; i++) {
        in1[i][0] = 0;
        in1[i][1] = 0;
        in2[i][0] = 0;
        in2[i][1] = 0;
    }

    p1 = fftw_plan_dft_1d(nfft, in1, out1, FFTW_FORWARD, FFTW_ESTIMATE);
    p2 = fftw_plan_dft_1d(nfft, in2, out2, FFTW_FORWARD, FFTW_ESTIMATE);
    fftw_execute(p1);
    fftw_execute(p2);

    // for (int i = 0; i < nfft; i++) {
    //     Gss[i] = fx1[i] * conj(fx2[i]);
    // }

    // 计算 Gss
    vector<complex<double>> Gss(nfft);
    for (int i = 0; i < nfft; i++) {
        complex<double> c1(out1[i][0], out1[i][1]);
        complex<double> c2(out2[i][0], out2[i][1]);
        Gss[i] = c1 * conj(c2);
    }

    // for (int i = 0; i < nfft; i++) {
    //     cout << Gss[i] << " ";
    // }
    // cout << endl;

    // 计算 exp(1i*angle(Gss))
    vector<complex<double>> expGss(nfft);
    for (int i = 0; i < nfft; i++) {
        expGss[i] = exp(complex<double>(0, 1) * arg(Gss[i]));
        in1[i][0] = expGss[i].real();
        in1[i][1] = expGss[i].imag();
    }

    // 计算 ifft(exp(1i*angle(Gss)))
    out3 = (fftw_complex *) fftw_malloc(sizeof(fftw_complex) * nfft);
    p3 = fftw_plan_dft_1d(nfft, in1, out3, FFTW_BACKWARD, FFTW_ESTIMATE);
    fftw_execute(p3);

    // 计算 xcorr_cac
    vector<complex<double>> xcorr_cac(nfft);
    for (int i = 0; i < nfft; i++) {
        xcorr_cac[i] = complex<double>(out3[i][0], out3[i][1]) / static_cast<double>(nfft);
    }

    // 计算 fftshift
    int half_size = nfft / 2;
    for (int i = 0; i < half_size; i++) {
        swap(xcorr_cac[i], xcorr_cac[i + half_size]);
    }//对啦

    // 计算 y
    int start = nfft / 2 + 1 - (ncorr - 1) / 2;
    int end = nfft / 2 + 1 + (ncorr - 1) / 2;
    for (int i = start - 1; i <= end - 1; i++) {
        // cout << xcorr_cac[i] << " ";
        y[i - start + 1] = xcorr_cac[i].real();
    }//对啦

    fftw_destroy_plan(p1);
    fftw_destroy_plan(p2);
    fftw_destroy_plan(p3);
    fftw_free(in1);
    fftw_free(in2);
    fftw_free(out1);
    fftw_free(out2);
    fftw_free(out3);
}

void sinc_interp(Eigen::VectorXd input_signal, Eigen::VectorXd input_time, int num, Eigen::Ref<Eigen::VectorXd> output_signal, Eigen::Ref<Eigen::VectorXd> output_time) {
    int n_length = input_time.size();       // 原始信号的长度
    int N = n_length + num * (n_length - 1);// 总点数

    double y_cac = 0;   // 累加变量
    double m_before = 0;// 当前插值点之前的原始时间位置
    double m_back = 0;  // 当前插值点之后的原始时间位置
    double dt = 0;      // 该插值区间的分辨率
    double m_cac = 0;   // 新的插值点对应的时间位置

    for (int i = 1; i <= N; i++) {
        if (i % (num + 1) == 1) {// 如果刚好取到
            output_signal[i - 1] = input_signal[ceil(i / (num + 1.0)) - 1];
            output_time[i - 1] = input_time[ceil(i / (num + 1.0)) - 1];
        } else {                                                                      // 如果没有取到
            y_cac = 0;                                                                // 累加变量
            m_before = input_time[ceil(i / (num + 1.0)) - 1];                         // 当前插值点之前的原始时间位置
            m_back = input_time[ceil(i / (num + 1.0))];                               // 当前插值点之后的原始时间位置
            dt = (m_back - m_before) / (num + 1.0);                                   // 该插值区间的分辨率
            m_cac = m_before + dt * (i - (num + 1) * (ceil(i / (num + 1.0) - 1)) - 1);// 新的插值点对应的时间位置
            for (int j = 0; j < n_length; j++) {
                // if (i == 2)  {
                //     cout << "======================" << endl;
                //     cout << "Debug data:" << endl;
                //     cout << "input_signal[j]: " << input_signal[j] << endl;
                //     cout << "input_time[j]: " << input_time[j] << endl;
                //     cout << "t " << ceil(i / (num + 1.0) - 1) << endl;
                //     cout << "tt: " << (num + 1) * (ceil(i / (num + 1) - 1)) << endl;
                //     cout << "ttt: " << i - (num + 1) * (ceil(i / (num + 1) - 1)) - 1 << endl;
                //     cout << "m_cac: " << m_cac << endl;
                //     cout << "y_cac: " << y_cac << endl;
                // }
                y_cac += input_signal[j] * sin((m_cac - input_time[j]) * M_PI) / ((m_cac - input_time[j]) * M_PI);// 进行sinc插值累加
            }
            output_signal[i - 1] = y_cac;// 信号赋值
            output_time[i - 1] = m_cac;  // 时间赋值
        }
    }
}

// 使用 Azure Kinect 的麦克风阵列进行声源定位
void cas::kinect::startSoundSourceLocalization() {
    unsigned int sample_rate = 44100;                       // 采样率
    const int samples = 4410;                                // 每个周期的采样数
    const int channels = 7;                                 // 声道数
    const unsigned int buffer_time = 0.1 * sample_rate;     // 缓冲区大小
    const snd_pcm_format_t format = SND_PCM_FORMAT_FLOAT_LE;// 数据格式为float类型
    const int frames_per_period = 4410;                     // 每个周期的帧数
    const int periods = 10;                                 // 缓冲区中周期的数量
    unsigned long period_size = 256;
    int fmt_size = 4;

    snd_pcm_t *pcm_handle;
    snd_pcm_hw_params_t *hw_params;
    snd_pcm_sw_params_t *sw_params;


    // 打开Azure Kinect的麦克风阵列
    if (snd_pcm_open(&pcm_handle, MICROPHONE_NAME, SND_PCM_STREAM_CAPTURE, 0) < 0) {
        cerr << "错误：无法打开麦克风阵列。" << endl;
        return;
    }

    if (snd_pcm_sw_params_malloc(&sw_params) < 0) {
        cerr << "错误：无法分配软件参数结构。" << endl;
        return;
    }

    snd_pcm_sw_params_current(pcm_handle, sw_params);
    snd_pcm_hw_params_alloca(&hw_params);

    if (snd_pcm_hw_params_any(pcm_handle, hw_params) < 0) {
        cerr << "错误：无法初始化硬件参数结构。" << endl;
        return;
    }

    if (snd_pcm_hw_params_set_access(pcm_handle, hw_params, SND_PCM_ACCESS_RW_INTERLEAVED) < 0) {
        cerr << "错误：无法设置访问类型。" << endl;
        return;
    }

    if (snd_pcm_hw_params_set_format(pcm_handle, hw_params, format) < 0) {
        cerr << "错误：无法设置格式。" << endl;
        return;
    }

    if (snd_pcm_hw_params_set_channels(pcm_handle, hw_params, channels) < 0) {
        cerr << "错误：无法设置声道数。" << endl;
        return;
    }

    if (snd_pcm_hw_params_set_rate_near(pcm_handle, hw_params, &sample_rate, 0) < 0) {
        cerr << "错误：无法设置采样率。" << endl;
        return;
    }

    if (snd_pcm_hw_params_set_period_size_near(pcm_handle, hw_params, &period_size, 0) < 0) {
        cerr << "错误：无法设置周期大小。" << endl;
        return;
    }

    // if (snd_pcm_hw_params_set_buffer_time_near(pcm_handle, hw_params, &buffer_time, 0) < 0) {
    //     cerr << "错误：无法设置缓冲区时间。" << endl;
    //     return;
    // }

    // if (snd_pcm_hw_params_set_periods(pcm_handle, hw_params, 7, 0) < 0) {
    //     cerr << "错误：无法设置周期数量" << endl;
    //     return;
    // }

    // if (snd_pcm_sw_params_set_start_threshold(pcm_handle, sw_params, frames_per_period * periods) < 0) {
    //     cout << "错误：无法设置启动阈值" << endl;
    //     return;
    // }

    // if (snd_pcm_sw_params(pcm_handle, sw_params) < 0) {
    //     cout << "错误：无法设置软件参数" << endl;
    //     return;
    // }


    if (snd_pcm_hw_params(pcm_handle, hw_params) < 0) {
        cerr << "错误：无法设置硬件参数。" << endl;
        return;
    }

    cout << "声源捕获开启成功" << endl;

    // int frame_size = channels * 4;               // 一个采样点占用的字节数
    // int channels_size = BUFFER_SIZE / frame_size;// 一个缓冲区有多少个采样点

    // double data1[400] = {0.000335693359375000, 0.000396728515625000, 0.000396728515625000, 0.000457763671875000, 0.000427246093750000, 0.000396728515625000, 0.000335693359375000, 0.000305175781250000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000366210937500000, 0.000335693359375000, 0.000274658203125000, 0.000152587890625000, 9.15527343750000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 0.000122070312500000, 0.000213623046875000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000335693359375000, 0.000305175781250000, 0.000244140625000000, 0.000183105468750000, 0.000183105468750000, 0.000152587890625000, 0.000244140625000000, 0.000244140625000000, 0.000305175781250000, 0.000244140625000000, 0.000274658203125000, 0.000274658203125000, 0.000305175781250000, 0.000244140625000000, 0.000274658203125000, 0.000244140625000000, 0.000183105468750000, 0.000183105468750000, 0.000213623046875000, 0.000244140625000000, 0.000305175781250000, 0.000366210937500000, 0.000427246093750000, 0.000457763671875000, 0.000488281250000000, 0.000457763671875000, 0.000457763671875000, 0.000457763671875000, 0.000427246093750000, 0.000396728515625000, 0.000366210937500000, 0.000335693359375000, 0.000305175781250000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000274658203125000, 0.000305175781250000, 0.000366210937500000, 0.000457763671875000, 0.000518798828125000, 0.000549316406250000, 0.000549316406250000, 0.000518798828125000, 0.000457763671875000, 0.000457763671875000, 0.000396728515625000, 0.000366210937500000, 0.000335693359375000, 0.000366210937500000, 0.000427246093750000, 0.000549316406250000, 0.000579833984375000, 0.000579833984375000, 0.000549316406250000, 0.000518798828125000, 0.000518798828125000, 0.000518798828125000, 0.000457763671875000, 0.000396728515625000, 0.000335693359375000, 0.000305175781250000, 0.000274658203125000, 0.000274658203125000, 0.000274658203125000, 0.000274658203125000, 0.000335693359375000, 0.000366210937500000, 0.000396728515625000, 0.000335693359375000, 0.000274658203125000, 0.000213623046875000, 0.000152587890625000, 0.000122070312500000, 6.10351562500000e-05, 3.05175781250000e-05, 0, 0, 3.05175781250000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 0.000122070312500000, 0.000122070312500000, 0.000183105468750000, 0.000183105468750000, 0.000152587890625000, 0.000152587890625000, 9.15527343750000e-05, 9.15527343750000e-05, 0.000152587890625000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000213623046875000, 0.000213623046875000, 0.000152587890625000, 3.05175781250000e-05, -3.05175781250000e-05, -0.000122070312500000, -0.000213623046875000, -0.000244140625000000, -0.000305175781250000, -0.000366210937500000, -0.000427246093750000, -0.000427246093750000, -0.000427246093750000, -0.000396728515625000, -0.000366210937500000, -0.000305175781250000, -0.000274658203125000, -0.000274658203125000, -0.000305175781250000, -0.000396728515625000, -0.000488281250000000, -0.000640869140625000, -0.000732421875000000, -0.000793457031250000, -0.000823974609375000, -0.000823974609375000, -0.000762939453125000, -0.000732421875000000, -0.000671386718750000, -0.000610351562500000, -0.000549316406250000, -0.000549316406250000, -0.000579833984375000, -0.000640869140625000, -0.000701904296875000, -0.000823974609375000, -0.000885009765625000, -0.000976562500000000, -0.00103759765625000, -0.00103759765625000, -0.00100708007812500, -0.000976562500000000, -0.000946044921875000, -0.000915527343750000, -0.000915527343750000, -0.000946044921875000, -0.000976562500000000, -0.00100708007812500, -0.00109863281250000, -0.00109863281250000, -0.00109863281250000, -0.00103759765625000, -0.000976562500000000, -0.000915527343750000, -0.000885009765625000, -0.000885009765625000, -0.000854492187500000, -0.000854492187500000, -0.000854492187500000, -0.000885009765625000, -0.000885009765625000, -0.000915527343750000, -0.000946044921875000, -0.000946044921875000, -0.000915527343750000, -0.000793457031250000, -0.000732421875000000, -0.000671386718750000, -0.000610351562500000, -0.000579833984375000, -0.000549316406250000, -0.000640869140625000, -0.000701904296875000, -0.000701904296875000, -0.000732421875000000, -0.000762939453125000, -0.000762939453125000, -0.000762939453125000, -0.000701904296875000, -0.000610351562500000, -0.000549316406250000, -0.000457763671875000, -0.000396728515625000, -0.000335693359375000, -0.000244140625000000, -0.000183105468750000, -0.000213623046875000, -0.000274658203125000, -0.000366210937500000, -0.000488281250000000, -0.000579833984375000, -0.000701904296875000, -0.000732421875000000, -0.000793457031250000, -0.000762939453125000, -0.000671386718750000, -0.000610351562500000, -0.000488281250000000, -0.000396728515625000, -0.000274658203125000, -0.000183105468750000, -6.10351562500000e-05, -3.05175781250000e-05, -9.15527343750000e-05, -0.000122070312500000, -0.000183105468750000, -0.000213623046875000, -0.000305175781250000, -0.000427246093750000, -0.000488281250000000, -0.000518798828125000, -0.000549316406250000, -0.000457763671875000, -0.000366210937500000, -0.000305175781250000, -0.000244140625000000, -0.000122070312500000, 0, 0.000122070312500000, 0.000183105468750000, 0.000244140625000000, 0.000274658203125000, 0.000335693359375000, 0.000305175781250000, 0.000244140625000000, 0.000152587890625000, 6.10351562500000e-05, 0, -3.05175781250000e-05, 0, 3.05175781250000e-05, 0.000122070312500000, 0.000183105468750000, 0.000213623046875000, 0.000274658203125000, 0.000396728515625000, 0.000457763671875000, 0.000518798828125000, 0.000488281250000000, 0.000518798828125000, 0.000488281250000000, 0.000457763671875000, 0.000427246093750000, 0.000457763671875000, 0.000457763671875000, 0.000457763671875000, 0.000549316406250000, 0.000549316406250000, 0.000579833984375000, 0.000549316406250000, 0.000488281250000000, 0.000457763671875000, 0.000457763671875000, 0.000457763671875000, 0.000549316406250000, 0.000671386718750000, 0.000793457031250000, 0.000915527343750000, 0.000915527343750000, 0.000946044921875000, 0.000915527343750000, 0.000854492187500000, 0.000823974609375000, 0.000762939453125000, 0.000701904296875000, 0.000640869140625000, 0.000610351562500000, 0.000579833984375000, 0.000579833984375000, 0.000518798828125000, 0.000518798828125000, 0.000457763671875000, 0.000457763671875000, 0.000427246093750000, 0.000427246093750000, 0.000396728515625000, 0.000396728515625000, 0.000427246093750000, 0.000457763671875000, 0.000518798828125000, 0.000518798828125000, 0.000518798828125000, 0.000488281250000000, 0.000488281250000000, 0.000488281250000000, 0.000457763671875000, 0.000457763671875000, 0.000396728515625000, 0.000427246093750000, 0.000427246093750000, 0.000427246093750000, 0.000366210937500000, 0.000305175781250000, 0.000274658203125000, 0.000305175781250000, 0.000335693359375000, 0.000396728515625000, 0.000396728515625000, 0.000366210937500000, 0.000366210937500000, 0.000335693359375000, 0.000305175781250000, 0.000244140625000000, 0.000213623046875000, 0.000183105468750000, 0.000152587890625000, 9.15527343750000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000122070312500000, 0.000183105468750000, 0.000183105468750000, 0.000152587890625000, 0.000122070312500000, 3.05175781250000e-05, 0, -6.10351562500000e-05, -0.000122070312500000, -0.000152587890625000, -0.000183105468750000, -0.000244140625000000, -0.000213623046875000, -0.000183105468750000, -0.000213623046875000, -0.000183105468750000, -0.000213623046875000, -0.000183105468750000, -0.000244140625000000, -0.000366210937500000, -0.000427246093750000, -0.000488281250000000, -0.000518798828125000, -0.000488281250000000, -0.000488281250000000, -0.000457763671875000, -0.000427246093750000, -0.000427246093750000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000396728515625000, -0.000427246093750000, -0.000457763671875000, -0.000518798828125000, -0.000518798828125000, -0.000488281250000000, -0.000457763671875000, -0.000427246093750000, -0.000457763671875000, -0.000488281250000000, -0.000549316406250000, -0.000610351562500000, -0.000701904296875000, -0.000762939453125000, -0.000823974609375000, -0.000885009765625000, -0.000885009765625000, -0.000915527343750000, -0.000885009765625000, -0.000885009765625000, -0.000854492187500000, -0.000823974609375000, -0.000793457031250000, -0.000701904296875000, -0.000671386718750000, -0.000671386718750000, -0.000732421875000000, -0.000793457031250000, -0.000823974609375000, -0.000915527343750000, -0.00103759765625000, -0.00112915039062500, -0.00119018554687500, -0.00119018554687500, -0.00109863281250000, -0.00103759765625000, -0.00100708007812500, -0.00100708007812500, -0.00100708007812500};
    // double data2[400] = {0.000244140625000000, 0.000244140625000000, 0.000183105468750000, 0.000152587890625000, 9.15527343750000e-05, 3.05175781250000e-05, 0, 0, 0, 3.05175781250000e-05, 0, 0, 0, 3.05175781250000e-05, 9.15527343750000e-05, 0.000152587890625000, 0.000183105468750000, 0.000244140625000000, 0.000213623046875000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000122070312500000, 3.05175781250000e-05, 0, -3.05175781250000e-05, -3.05175781250000e-05, -6.10351562500000e-05, -3.05175781250000e-05, 0, 6.10351562500000e-05, 0.000152587890625000, 0.000213623046875000, 0.000274658203125000, 0.000335693359375000, 0.000366210937500000, 0.000366210937500000, 0.000396728515625000, 0.000305175781250000, 0.000213623046875000, 0.000152587890625000, 9.15527343750000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000183105468750000, 0.000213623046875000, 0.000274658203125000, 0.000305175781250000, 0.000335693359375000, 0.000335693359375000, 0.000366210937500000, 0.000335693359375000, 0.000335693359375000, 0.000274658203125000, 0.000274658203125000, 0.000244140625000000, 0.000213623046875000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000183105468750000, 0.000213623046875000, 0.000183105468750000, 0.000244140625000000, 0.000244140625000000, 0.000305175781250000, 0.000335693359375000, 0.000366210937500000, 0.000366210937500000, 0.000335693359375000, 0.000335693359375000, 0.000366210937500000, 0.000366210937500000, 0.000366210937500000, 0.000335693359375000, 0.000305175781250000, 0.000274658203125000, 0.000244140625000000, 0.000213623046875000, 0.000183105468750000, 0.000183105468750000, 0.000213623046875000, 0.000244140625000000, 0.000274658203125000, 0.000274658203125000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000305175781250000, 0.000244140625000000, 0.000244140625000000, 0.000183105468750000, 0.000122070312500000, 6.10351562500000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000152587890625000, 0.000152587890625000, 0.000122070312500000, 0.000122070312500000, 0.000122070312500000, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000122070312500000, 9.15527343750000e-05, 0.000122070312500000, 6.10351562500000e-05, 3.05175781250000e-05, 0, -6.10351562500000e-05, -0.000152587890625000, -0.000213623046875000, -0.000244140625000000, -0.000274658203125000, -0.000274658203125000, -0.000305175781250000, -0.000305175781250000, -0.000274658203125000, -0.000274658203125000, -0.000244140625000000, -0.000244140625000000, -0.000274658203125000, -0.000335693359375000, -0.000427246093750000, -0.000518798828125000, -0.000579833984375000, -0.000610351562500000, -0.000579833984375000, -0.000549316406250000, -0.000549316406250000, -0.000549316406250000, -0.000549316406250000, -0.000488281250000000, -0.000457763671875000, -0.000427246093750000, -0.000396728515625000, -0.000427246093750000, -0.000457763671875000, -0.000549316406250000, -0.000610351562500000, -0.000701904296875000, -0.000762939453125000, -0.000762939453125000, -0.000762939453125000, -0.000732421875000000, -0.000701904296875000, -0.000701904296875000, -0.000671386718750000, -0.000701904296875000, -0.000732421875000000, -0.000762939453125000, -0.000762939453125000, -0.000793457031250000, -0.000762939453125000, -0.000762939453125000, -0.000732421875000000, -0.000762939453125000, -0.000732421875000000, -0.000732421875000000, -0.000732421875000000, -0.000701904296875000, -0.000640869140625000, -0.000610351562500000, -0.000640869140625000, -0.000671386718750000, -0.000701904296875000, -0.000671386718750000, -0.000671386718750000, -0.000671386718750000, -0.000610351562500000, -0.000640869140625000, -0.000610351562500000, -0.000610351562500000, -0.000610351562500000, -0.000579833984375000, -0.000549316406250000, -0.000579833984375000, -0.000549316406250000, -0.000518798828125000, -0.000518798828125000, -0.000518798828125000, -0.000518798828125000, -0.000579833984375000, -0.000579833984375000, -0.000610351562500000, -0.000579833984375000, -0.000488281250000000, -0.000457763671875000, -0.000457763671875000, -0.000457763671875000, -0.000427246093750000, -0.000427246093750000, -0.000427246093750000, -0.000457763671875000, -0.000457763671875000, -0.000427246093750000, -0.000396728515625000, -0.000366210937500000, -0.000335693359375000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000335693359375000, -0.000305175781250000, -0.000366210937500000, -0.000335693359375000, -0.000366210937500000, -0.000335693359375000, -0.000244140625000000, -0.000244140625000000, -0.000213623046875000, -0.000183105468750000, -0.000152587890625000, -0.000122070312500000, -9.15527343750000e-05, -9.15527343750000e-05, -0.000122070312500000, -9.15527343750000e-05, -6.10351562500000e-05, -3.05175781250000e-05, 0, -3.05175781250000e-05, 0, 0, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000244140625000000, 0.000305175781250000, 0.000335693359375000, 0.000366210937500000, 0.000366210937500000, 0.000366210937500000, 0.000366210937500000, 0.000366210937500000, 0.000335693359375000, 0.000305175781250000, 0.000244140625000000, 0.000183105468750000, 0.000183105468750000, 0.000213623046875000, 0.000274658203125000, 0.000274658203125000, 0.000274658203125000, 0.000366210937500000, 0.000457763671875000, 0.000549316406250000, 0.000579833984375000, 0.000579833984375000, 0.000610351562500000, 0.000610351562500000, 0.000549316406250000, 0.000549316406250000, 0.000488281250000000, 0.000427246093750000, 0.000396728515625000, 0.000396728515625000, 0.000396728515625000, 0.000396728515625000, 0.000427246093750000, 0.000457763671875000, 0.000518798828125000, 0.000549316406250000, 0.000549316406250000, 0.000518798828125000, 0.000518798828125000, 0.000488281250000000, 0.000457763671875000, 0.000396728515625000, 0.000335693359375000, 0.000244140625000000, 0.000183105468750000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000244140625000000, 0.000274658203125000, 0.000335693359375000, 0.000396728515625000, 0.000457763671875000, 0.000457763671875000, 0.000457763671875000, 0.000427246093750000, 0.000396728515625000, 0.000335693359375000, 0.000274658203125000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000122070312500000, 0.000122070312500000, 9.15527343750000e-05, 6.10351562500000e-05, 0, 0, 0, 0, 0, 0, 3.05175781250000e-05, 0, 0, -9.15527343750000e-05, -0.000122070312500000, -0.000122070312500000, -0.000122070312500000, -0.000152587890625000, -0.000152587890625000, -0.000152587890625000, -0.000183105468750000, -0.000152587890625000, -0.000213623046875000, -0.000183105468750000, -0.000244140625000000, -0.000274658203125000, -0.000335693359375000, -0.000335693359375000, -0.000335693359375000, -0.000366210937500000, -0.000366210937500000, -0.000305175781250000, -0.000305175781250000, -0.000305175781250000, -0.000274658203125000, -0.000244140625000000, -0.000183105468750000, -0.000152587890625000, -0.000152587890625000, -0.000213623046875000, -0.000244140625000000, -0.000305175781250000, -0.000366210937500000, -0.000427246093750000, -0.000457763671875000, -0.000457763671875000, -0.000427246093750000, -0.000366210937500000, -0.000335693359375000, -0.000305175781250000, -0.000335693359375000, -0.000305175781250000, -0.000335693359375000, -0.000396728515625000, -0.000457763671875000, -0.000488281250000000, -0.000549316406250000, -0.000610351562500000, -0.000671386718750000, -0.000701904296875000, -0.000671386718750000, -0.000701904296875000, -0.000701904296875000, -0.000671386718750000, -0.000640869140625000, -0.000610351562500000, -0.000640869140625000, -0.000671386718750000, -0.000701904296875000, -0.000732421875000000, -0.000732421875000000, -0.000732421875000000, -0.000701904296875000, -0.000732421875000000, -0.000732421875000000, -0.000762939453125000, -0.000762939453125000, -0.000732421875000000, -0.000762939453125000, -0.000732421875000000, -0.000732421875000000, -0.000762939453125000};
    // double data3[400] = {0.000152587890625000, 0.000152587890625000, 9.15527343750000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000152587890625000, 0.000152587890625000, 0.000183105468750000, 0.000183105468750000, 0.000244140625000000, 0.000213623046875000, 0.000183105468750000, 0.000122070312500000, 6.10351562500000e-05, 3.05175781250000e-05, 0, 0, 0, 0, 3.05175781250000e-05, 0.000122070312500000, 0.000152587890625000, 0.000213623046875000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000122070312500000, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000152587890625000, 0.000183105468750000, 0.000244140625000000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000335693359375000, 0.000305175781250000, 0.000305175781250000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000305175781250000, 0.000305175781250000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000274658203125000, 0.000305175781250000, 0.000335693359375000, 0.000366210937500000, 0.000335693359375000, 0.000366210937500000, 0.000366210937500000, 0.000335693359375000, 0.000335693359375000, 0.000335693359375000, 0.000335693359375000, 0.000335693359375000, 0.000305175781250000, 0.000274658203125000, 0.000305175781250000, 0.000244140625000000, 0.000244140625000000, 0.000183105468750000, 0.000152587890625000, 0.000152587890625000, 0.000152587890625000, 0.000152587890625000, 0.000213623046875000, 0.000213623046875000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000183105468750000, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 9.15527343750000e-05, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 9.15527343750000e-05, 0.000122070312500000, 0.000152587890625000, 0.000152587890625000, 0.000152587890625000, 0.000213623046875000, 0.000183105468750000, 0.000152587890625000, 9.15527343750000e-05, 3.05175781250000e-05, -3.05175781250000e-05, -6.10351562500000e-05, -9.15527343750000e-05, -0.000152587890625000, -0.000183105468750000, -0.000183105468750000, -0.000152587890625000, -0.000122070312500000, -9.15527343750000e-05, -0.000122070312500000, -0.000122070312500000, -0.000152587890625000, -0.000152587890625000, -0.000213623046875000, -0.000244140625000000, -0.000305175781250000, -0.000366210937500000, -0.000457763671875000, -0.000457763671875000, -0.000518798828125000, -0.000518798828125000, -0.000488281250000000, -0.000457763671875000, -0.000457763671875000, -0.000427246093750000, -0.000396728515625000, -0.000366210937500000, -0.000396728515625000, -0.000427246093750000, -0.000488281250000000, -0.000518798828125000, -0.000549316406250000, -0.000549316406250000, -0.000549316406250000, -0.000549316406250000, -0.000549316406250000, -0.000549316406250000, -0.000610351562500000, -0.000671386718750000, -0.000671386718750000, -0.000671386718750000, -0.000701904296875000, -0.000671386718750000, -0.000671386718750000, -0.000640869140625000, -0.000610351562500000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000549316406250000, -0.000610351562500000, -0.000579833984375000, -0.000579833984375000, -0.000610351562500000, -0.000610351562500000, -0.000579833984375000, -0.000579833984375000, -0.000518798828125000, -0.000549316406250000, -0.000488281250000000, -0.000457763671875000, -0.000427246093750000, -0.000396728515625000, -0.000427246093750000, -0.000427246093750000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000305175781250000, -0.000335693359375000, -0.000335693359375000, -0.000305175781250000, -0.000305175781250000, -0.000305175781250000, -0.000305175781250000, -0.000274658203125000, -0.000305175781250000, -0.000305175781250000, -0.000274658203125000, -0.000274658203125000, -0.000274658203125000, -0.000213623046875000, -0.000152587890625000, -0.000183105468750000, -0.000152587890625000, -0.000213623046875000, -0.000244140625000000, -0.000274658203125000, -0.000305175781250000, -0.000305175781250000, -0.000305175781250000, -0.000335693359375000, -0.000366210937500000, -0.000335693359375000, -0.000274658203125000, -0.000274658203125000, -0.000213623046875000, -0.000152587890625000, -0.000122070312500000, -9.15527343750000e-05, -9.15527343750000e-05, -0.000122070312500000, -0.000122070312500000, -0.000122070312500000, -0.000152587890625000, -0.000152587890625000, -0.000183105468750000, -0.000152587890625000, -0.000122070312500000, -9.15527343750000e-05, 0, 0, 0, 3.05175781250000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000183105468750000, 0.000244140625000000, 0.000213623046875000, 0.000274658203125000, 0.000244140625000000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000274658203125000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000305175781250000, 0.000305175781250000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000366210937500000, 0.000396728515625000, 0.000427246093750000, 0.000457763671875000, 0.000518798828125000, 0.000518798828125000, 0.000549316406250000, 0.000549316406250000, 0.000457763671875000, 0.000457763671875000, 0.000396728515625000, 0.000366210937500000, 0.000366210937500000, 0.000427246093750000, 0.000396728515625000, 0.000457763671875000, 0.000457763671875000, 0.000457763671875000, 0.000427246093750000, 0.000396728515625000, 0.000366210937500000, 0.000305175781250000, 0.000305175781250000, 0.000244140625000000, 0.000213623046875000, 0.000244140625000000, 0.000183105468750000, 0.000152587890625000, 0.000152587890625000, 9.15527343750000e-05, 0.000122070312500000, 0.000183105468750000, 0.000213623046875000, 0.000213623046875000, 0.000244140625000000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000183105468750000, 0.000183105468750000, 9.15527343750000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000122070312500000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000122070312500000, 0.000122070312500000, 6.10351562500000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 0, 0, 0, 3.05175781250000e-05, 0, 0, 0, 0, -3.05175781250000e-05, -3.05175781250000e-05, -6.10351562500000e-05, -0.000122070312500000, -0.000213623046875000, -0.000274658203125000, -0.000305175781250000, -0.000335693359375000, -0.000335693359375000, -0.000335693359375000, -0.000366210937500000, -0.000366210937500000, -0.000396728515625000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000335693359375000, -0.000335693359375000, -0.000274658203125000, -0.000274658203125000, -0.000274658203125000, -0.000335693359375000, -0.000305175781250000, -0.000366210937500000, -0.000366210937500000, -0.000427246093750000, -0.000396728515625000, -0.000427246093750000, -0.000396728515625000, -0.000366210937500000, -0.000366210937500000, -0.000335693359375000, -0.000274658203125000, -0.000305175781250000, -0.000274658203125000, -0.000305175781250000, -0.000366210937500000, -0.000396728515625000, -0.000457763671875000, -0.000488281250000000, -0.000518798828125000, -0.000518798828125000, -0.000518798828125000, -0.000518798828125000, -0.000518798828125000, -0.000549316406250000, -0.000518798828125000, -0.000518798828125000, -0.000488281250000000, -0.000488281250000000, -0.000518798828125000, -0.000549316406250000, -0.000579833984375000, -0.000610351562500000, -0.000640869140625000, -0.000671386718750000, -0.000671386718750000, -0.000671386718750000, -0.000640869140625000, -0.000640869140625000, -0.000610351562500000, -0.000610351562500000, -0.000610351562500000, -0.000671386718750000, -0.000671386718750000};
    // double data4[400] = {0.000152587890625000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000152587890625000, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000152587890625000, 0.000183105468750000, 0.000183105468750000, 0.000213623046875000, 0.000183105468750000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000152587890625000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000244140625000000, 0.000213623046875000, 0.000274658203125000, 0.000244140625000000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000274658203125000, 0.000274658203125000, 0.000305175781250000, 0.000274658203125000, 0.000305175781250000, 0.000274658203125000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000335693359375000, 0.000366210937500000, 0.000335693359375000, 0.000335693359375000, 0.000305175781250000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000152587890625000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000122070312500000, 0.000122070312500000, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 0, 0, 0, 0, 0, 0, 0, 3.05175781250000e-05, 0, 0, 0, 3.05175781250000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 0, 0, -3.05175781250000e-05, -9.15527343750000e-05, -0.000122070312500000, -0.000152587890625000, -0.000183105468750000, -0.000183105468750000, -0.000183105468750000, -0.000152587890625000, -0.000152587890625000, -0.000122070312500000, -0.000152587890625000, -0.000152587890625000, -0.000183105468750000, -0.000213623046875000, -0.000244140625000000, -0.000274658203125000, -0.000335693359375000, -0.000396728515625000, -0.000457763671875000, -0.000457763671875000, -0.000518798828125000, -0.000518798828125000, -0.000488281250000000, -0.000457763671875000, -0.000427246093750000, -0.000427246093750000, -0.000427246093750000, -0.000427246093750000, -0.000457763671875000, -0.000457763671875000, -0.000488281250000000, -0.000518798828125000, -0.000518798828125000, -0.000549316406250000, -0.000579833984375000, -0.000640869140625000, -0.000640869140625000, -0.000671386718750000, -0.000640869140625000, -0.000640869140625000, -0.000640869140625000, -0.000640869140625000, -0.000640869140625000, -0.000610351562500000, -0.000579833984375000, -0.000549316406250000, -0.000518798828125000, -0.000518798828125000, -0.000549316406250000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000549316406250000, -0.000518798828125000, -0.000488281250000000, -0.000427246093750000, -0.000427246093750000, -0.000396728515625000, -0.000366210937500000, -0.000335693359375000, -0.000335693359375000, -0.000335693359375000, -0.000335693359375000, -0.000335693359375000, -0.000335693359375000, -0.000366210937500000, -0.000366210937500000, -0.000335693359375000, -0.000274658203125000, -0.000183105468750000, -0.000152587890625000, -0.000122070312500000, -0.000152587890625000, -0.000122070312500000, -9.15527343750000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -0.000122070312500000, -0.000152587890625000, -0.000244140625000000, -0.000274658203125000, -0.000305175781250000, -0.000335693359375000, -0.000335693359375000, -0.000305175781250000, -0.000274658203125000, -0.000213623046875000, -0.000183105468750000, -0.000183105468750000, -0.000152587890625000, -0.000152587890625000, -0.000183105468750000, -0.000183105468750000, -0.000183105468750000, -0.000183105468750000, -0.000213623046875000, -0.000213623046875000, -0.000244140625000000, -0.000274658203125000, -0.000274658203125000, -0.000213623046875000, -0.000244140625000000, -0.000213623046875000, -0.000213623046875000, -0.000152587890625000, -0.000122070312500000, 0, 0, 3.05175781250000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000122070312500000, 0.000122070312500000, 9.15527343750000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000152587890625000, 0.000213623046875000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000274658203125000, 0.000274658203125000, 0.000244140625000000, 0.000274658203125000, 0.000244140625000000, 0.000274658203125000, 0.000305175781250000, 0.000335693359375000, 0.000366210937500000, 0.000396728515625000, 0.000396728515625000, 0.000396728515625000, 0.000396728515625000, 0.000366210937500000, 0.000335693359375000, 0.000335693359375000, 0.000366210937500000, 0.000396728515625000, 0.000396728515625000, 0.000457763671875000, 0.000427246093750000, 0.000457763671875000, 0.000457763671875000, 0.000488281250000000, 0.000518798828125000, 0.000518798828125000, 0.000518798828125000, 0.000488281250000000, 0.000457763671875000, 0.000427246093750000, 0.000396728515625000, 0.000335693359375000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000244140625000000, 0.000244140625000000, 0.000305175781250000, 0.000335693359375000, 0.000305175781250000, 0.000305175781250000, 0.000274658203125000, 0.000244140625000000, 0.000213623046875000, 0.000183105468750000, 0.000152587890625000, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000152587890625000, 0.000152587890625000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000152587890625000, 0.000122070312500000, 0.000152587890625000, 0.000183105468750000, 0.000213623046875000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000152587890625000, 0.000152587890625000, 0.000152587890625000, 0.000152587890625000, 9.15527343750000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 0, 0, -3.05175781250000e-05, -9.15527343750000e-05, -6.10351562500000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -0.000122070312500000, -0.000152587890625000, -0.000183105468750000, -0.000213623046875000, -0.000274658203125000, -0.000335693359375000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000396728515625000, -0.000396728515625000, -0.000396728515625000, -0.000335693359375000, -0.000305175781250000, -0.000274658203125000, -0.000305175781250000, -0.000274658203125000, -0.000305175781250000, -0.000305175781250000, -0.000305175781250000, -0.000274658203125000, -0.000305175781250000, -0.000305175781250000, -0.000274658203125000, -0.000274658203125000, -0.000305175781250000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000335693359375000, -0.000335693359375000, -0.000335693359375000, -0.000366210937500000, -0.000396728515625000, -0.000396728515625000, -0.000427246093750000, -0.000427246093750000, -0.000427246093750000, -0.000488281250000000, -0.000488281250000000, -0.000488281250000000, -0.000427246093750000, -0.000427246093750000, -0.000427246093750000, -0.000457763671875000, -0.000457763671875000, -0.000457763671875000, -0.000457763671875000, -0.000488281250000000, -0.000518798828125000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000610351562500000, -0.000640869140625000, -0.000640869140625000, -0.000640869140625000};
    // double data5[400] = {0.000152587890625000, 0.000244140625000000, 0.000244140625000000, 0.000274658203125000, 0.000335693359375000, 0.000366210937500000, 0.000366210937500000, 0.000366210937500000, 0.000396728515625000, 0.000366210937500000, 0.000335693359375000, 0.000305175781250000, 0.000244140625000000, 0.000213623046875000, 0.000152587890625000, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000122070312500000, 9.15527343750000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000152587890625000, 0.000183105468750000, 0.000183105468750000, 0.000244140625000000, 0.000183105468750000, 0.000152587890625000, 0.000122070312500000, 9.15527343750000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000183105468750000, 0.000183105468750000, 0.000244140625000000, 0.000274658203125000, 0.000305175781250000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000213623046875000, 0.000244140625000000, 0.000244140625000000, 0.000274658203125000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000244140625000000, 0.000274658203125000, 0.000274658203125000, 0.000274658203125000, 0.000335693359375000, 0.000305175781250000, 0.000335693359375000, 0.000366210937500000, 0.000396728515625000, 0.000396728515625000, 0.000366210937500000, 0.000366210937500000, 0.000396728515625000, 0.000366210937500000, 0.000366210937500000, 0.000305175781250000, 0.000274658203125000, 0.000244140625000000, 0.000274658203125000, 0.000244140625000000, 0.000274658203125000, 0.000305175781250000, 0.000335693359375000, 0.000335693359375000, 0.000335693359375000, 0.000305175781250000, 0.000244140625000000, 0.000152587890625000, 9.15527343750000e-05, 3.05175781250000e-05, -3.05175781250000e-05, -6.10351562500000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -6.10351562500000e-05, -3.05175781250000e-05, 0, 3.05175781250000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 0, -3.05175781250000e-05, 0, 0, 3.05175781250000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 0, 3.05175781250000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 0, 0, -3.05175781250000e-05, -6.10351562500000e-05, -9.15527343750000e-05, -0.000122070312500000, -9.15527343750000e-05, -9.15527343750000e-05, -0.000152587890625000, -0.000152587890625000, -0.000183105468750000, -0.000183105468750000, -0.000213623046875000, -0.000183105468750000, -0.000183105468750000, -0.000244140625000000, -0.000244140625000000, -0.000274658203125000, -0.000305175781250000, -0.000366210937500000, -0.000396728515625000, -0.000427246093750000, -0.000457763671875000, -0.000457763671875000, -0.000488281250000000, -0.000518798828125000, -0.000518798828125000, -0.000457763671875000, -0.000457763671875000, -0.000457763671875000, -0.000488281250000000, -0.000518798828125000, -0.000610351562500000, -0.000610351562500000, -0.000671386718750000, -0.000701904296875000, -0.000701904296875000, -0.000701904296875000, -0.000640869140625000, -0.000671386718750000, -0.000640869140625000, -0.000671386718750000, -0.000671386718750000, -0.000701904296875000, -0.000671386718750000, -0.000701904296875000, -0.000701904296875000, -0.000732421875000000, -0.000762939453125000, -0.000732421875000000, -0.000732421875000000, -0.000671386718750000, -0.000640869140625000, -0.000671386718750000, -0.000640869140625000, -0.000610351562500000, -0.000610351562500000, -0.000579833984375000, -0.000549316406250000, -0.000549316406250000, -0.000488281250000000, -0.000427246093750000, -0.000427246093750000, -0.000427246093750000, -0.000427246093750000, -0.000457763671875000, -0.000457763671875000, -0.000488281250000000, -0.000488281250000000, -0.000488281250000000, -0.000488281250000000, -0.000427246093750000, -0.000427246093750000, -0.000427246093750000, -0.000366210937500000, -0.000335693359375000, -0.000244140625000000, -0.000152587890625000, -9.15527343750000e-05, -6.10351562500000e-05, -3.05175781250000e-05, -6.10351562500000e-05, -9.15527343750000e-05, -0.000152587890625000, -0.000183105468750000, -0.000274658203125000, -0.000366210937500000, -0.000457763671875000, -0.000518798828125000, -0.000518798828125000, -0.000457763671875000, -0.000427246093750000, -0.000305175781250000, -0.000244140625000000, -0.000152587890625000, -9.15527343750000e-05, -6.10351562500000e-05, -9.15527343750000e-05, -0.000122070312500000, -0.000183105468750000, -0.000244140625000000, -0.000274658203125000, -0.000335693359375000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000396728515625000, -0.000305175781250000, -0.000274658203125000, -0.000213623046875000, -0.000122070312500000, -9.15527343750000e-05, -3.05175781250000e-05, -3.05175781250000e-05, -3.05175781250000e-05, 0, 0, 3.05175781250000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 0.000122070312500000, 0.000152587890625000, 9.15527343750000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000152587890625000, 0.000183105468750000, 0.000244140625000000, 0.000274658203125000, 0.000335693359375000, 0.000335693359375000, 0.000366210937500000, 0.000335693359375000, 0.000366210937500000, 0.000396728515625000, 0.000427246093750000, 0.000457763671875000, 0.000427246093750000, 0.000396728515625000, 0.000427246093750000, 0.000427246093750000, 0.000396728515625000, 0.000396728515625000, 0.000396728515625000, 0.000396728515625000, 0.000457763671875000, 0.000518798828125000, 0.000518798828125000, 0.000518798828125000, 0.000549316406250000, 0.000610351562500000, 0.000640869140625000, 0.000640869140625000, 0.000640869140625000, 0.000610351562500000, 0.000518798828125000, 0.000518798828125000, 0.000488281250000000, 0.000396728515625000, 0.000335693359375000, 0.000274658203125000, 0.000274658203125000, 0.000274658203125000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000366210937500000, 0.000396728515625000, 0.000366210937500000, 0.000335693359375000, 0.000366210937500000, 0.000335693359375000, 0.000335693359375000, 0.000335693359375000, 0.000244140625000000, 0.000213623046875000, 0.000183105468750000, 0.000152587890625000, 0.000152587890625000, 0.000183105468750000, 0.000213623046875000, 0.000244140625000000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000305175781250000, 0.000274658203125000, 0.000274658203125000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000183105468750000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000244140625000000, 0.000274658203125000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000305175781250000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000183105468750000, 6.10351562500000e-05, 0, -6.10351562500000e-05, -9.15527343750000e-05, -3.05175781250000e-05, -3.05175781250000e-05, 0, 0, 0, 0, -3.05175781250000e-05, -9.15527343750000e-05, -0.000122070312500000, -0.000213623046875000, -0.000244140625000000, -0.000305175781250000, -0.000335693359375000, -0.000335693359375000, -0.000366210937500000, -0.000335693359375000, -0.000305175781250000, -0.000274658203125000, -0.000274658203125000, -0.000244140625000000, -0.000213623046875000, -0.000213623046875000, -0.000244140625000000, -0.000244140625000000, -0.000244140625000000, -0.000213623046875000, -0.000183105468750000, -0.000183105468750000, -0.000213623046875000, -0.000213623046875000, -0.000274658203125000, -0.000335693359375000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000396728515625000, -0.000396728515625000, -0.000396728515625000, -0.000396728515625000, -0.000427246093750000, -0.000457763671875000, -0.000457763671875000, -0.000488281250000000, -0.000457763671875000, -0.000457763671875000, -0.000427246093750000, -0.000427246093750000, -0.000427246093750000, -0.000457763671875000, -0.000457763671875000, -0.000488281250000000, -0.000518798828125000, -0.000518798828125000, -0.000549316406250000, -0.000518798828125000, -0.000549316406250000, -0.000610351562500000, -0.000610351562500000, -0.000671386718750000, -0.000701904296875000, -0.000701904296875000, -0.000732421875000000, -0.000701904296875000, -0.000671386718750000};
    // double data6[400] = {3.05175781250000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000213623046875000, 0.000213623046875000, 0.000244140625000000, 0.000213623046875000, 0.000183105468750000, 0.000122070312500000, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 3.05175781250000e-05, 0, -6.10351562500000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -6.10351562500000e-05, -3.05175781250000e-05, 0, 3.05175781250000e-05, 9.15527343750000e-05, 0.000152587890625000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000152587890625000, 0.000122070312500000, 9.15527343750000e-05, 3.05175781250000e-05, 0, 0, 0, 0, 0, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000122070312500000, 0.000122070312500000, 0.000122070312500000, 0.000122070312500000, 0.000122070312500000, 0.000122070312500000, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000122070312500000, 9.15527343750000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 0.000152587890625000, 0.000183105468750000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000152587890625000, 0.000122070312500000, 0.000122070312500000, 9.15527343750000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000152587890625000, 0.000152587890625000, 0.000183105468750000, 0.000152587890625000, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000122070312500000, 0.000152587890625000, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 0, 0, 0, 0, 0, 0, 0, 0, -3.05175781250000e-05, -3.05175781250000e-05, -6.10351562500000e-05, -6.10351562500000e-05, -6.10351562500000e-05, -6.10351562500000e-05, -3.05175781250000e-05, -3.05175781250000e-05, -6.10351562500000e-05, 0, -3.05175781250000e-05, -3.05175781250000e-05, -3.05175781250000e-05, -6.10351562500000e-05, -3.05175781250000e-05, -3.05175781250000e-05, -3.05175781250000e-05, 0, 0, 0, 0, -3.05175781250000e-05, -9.15527343750000e-05, -0.000122070312500000, -0.000183105468750000, -0.000244140625000000, -0.000244140625000000, -0.000274658203125000, -0.000335693359375000, -0.000335693359375000, -0.000305175781250000, -0.000274658203125000, -0.000213623046875000, -0.000183105468750000, -0.000183105468750000, -0.000213623046875000, -0.000244140625000000, -0.000335693359375000, -0.000335693359375000, -0.000396728515625000, -0.000427246093750000, -0.000457763671875000, -0.000457763671875000, -0.000457763671875000, -0.000427246093750000, -0.000396728515625000, -0.000366210937500000, -0.000335693359375000, -0.000366210937500000, -0.000396728515625000, -0.000488281250000000, -0.000518798828125000, -0.000518798828125000, -0.000549316406250000, -0.000610351562500000, -0.000610351562500000, -0.000640869140625000, -0.000610351562500000, -0.000610351562500000, -0.000579833984375000, -0.000549316406250000, -0.000518798828125000, -0.000518798828125000, -0.000549316406250000, -0.000579833984375000, -0.000610351562500000, -0.000610351562500000, -0.000671386718750000, -0.000671386718750000, -0.000671386718750000, -0.000610351562500000, -0.000579833984375000, -0.000518798828125000, -0.000488281250000000, -0.000457763671875000, -0.000457763671875000, -0.000457763671875000, -0.000427246093750000, -0.000396728515625000, -0.000366210937500000, -0.000366210937500000, -0.000366210937500000, -0.000396728515625000, -0.000366210937500000, -0.000427246093750000, -0.000427246093750000, -0.000396728515625000, -0.000427246093750000, -0.000457763671875000, -0.000427246093750000, -0.000427246093750000, -0.000396728515625000, -0.000366210937500000, -0.000305175781250000, -0.000305175781250000, -0.000274658203125000, -0.000244140625000000, -0.000244140625000000, -0.000213623046875000, -0.000244140625000000, -0.000213623046875000, -0.000244140625000000, -0.000244140625000000, -0.000244140625000000, -0.000244140625000000, -0.000274658203125000, -0.000274658203125000, -0.000366210937500000, -0.000366210937500000, -0.000427246093750000, -0.000396728515625000, -0.000366210937500000, -0.000274658203125000, -0.000274658203125000, -0.000183105468750000, -0.000122070312500000, -3.05175781250000e-05, -3.05175781250000e-05, -3.05175781250000e-05, -3.05175781250000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -0.000183105468750000, -0.000213623046875000, -0.000244140625000000, -0.000274658203125000, -0.000305175781250000, -0.000274658203125000, -0.000244140625000000, -0.000213623046875000, -0.000152587890625000, -0.000122070312500000, 0, 0, 6.10351562500000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000152587890625000, 0.000213623046875000, 0.000244140625000000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000366210937500000, 0.000335693359375000, 0.000366210937500000, 0.000366210937500000, 0.000305175781250000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000244140625000000, 0.000244140625000000, 0.000274658203125000, 0.000335693359375000, 0.000366210937500000, 0.000427246093750000, 0.000488281250000000, 0.000518798828125000, 0.000488281250000000, 0.000457763671875000, 0.000427246093750000, 0.000366210937500000, 0.000305175781250000, 0.000305175781250000, 0.000244140625000000, 0.000274658203125000, 0.000213623046875000, 0.000274658203125000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000183105468750000, 0.000213623046875000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000274658203125000, 0.000305175781250000, 0.000335693359375000, 0.000305175781250000, 0.000305175781250000, 0.000274658203125000, 0.000305175781250000, 0.000274658203125000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000274658203125000, 0.000213623046875000, 0.000213623046875000, 0.000152587890625000, 0.000152587890625000, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000152587890625000, 0.000183105468750000, 0.000152587890625000, 0.000152587890625000, 0.000152587890625000, 9.15527343750000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 0, 0, -3.05175781250000e-05, -3.05175781250000e-05, -6.10351562500000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -6.10351562500000e-05, -6.10351562500000e-05, -3.05175781250000e-05, -6.10351562500000e-05, 0, -3.05175781250000e-05, -3.05175781250000e-05, 0, -6.10351562500000e-05, -6.10351562500000e-05, -0.000122070312500000, -0.000152587890625000, -0.000183105468750000, -0.000213623046875000, -0.000213623046875000, -0.000213623046875000, -0.000213623046875000, -0.000183105468750000, -0.000152587890625000, -9.15527343750000e-05, -9.15527343750000e-05, -6.10351562500000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -0.000152587890625000, -0.000213623046875000, -0.000244140625000000, -0.000244140625000000, -0.000244140625000000, -0.000244140625000000, -0.000274658203125000, -0.000305175781250000, -0.000274658203125000, -0.000244140625000000, -0.000244140625000000, -0.000305175781250000, -0.000305175781250000, -0.000335693359375000, -0.000396728515625000, -0.000427246093750000, -0.000396728515625000, -0.000396728515625000, -0.000366210937500000, -0.000335693359375000, -0.000335693359375000, -0.000335693359375000, -0.000305175781250000, -0.000335693359375000, -0.000366210937500000, -0.000396728515625000, -0.000457763671875000, -0.000488281250000000, -0.000549316406250000, -0.000610351562500000, -0.000640869140625000, -0.000640869140625000, -0.000579833984375000, -0.000549316406250000, -0.000488281250000000, -0.000457763671875000};
    // double data7[400] = {0.000152587890625000, 0.000183105468750000, 0.000152587890625000, 0.000122070312500000, 9.15527343750000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 0.000122070312500000, 6.10351562500000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 0, -3.05175781250000e-05, -6.10351562500000e-05, -6.10351562500000e-05, -3.05175781250000e-05, -3.05175781250000e-05, 0, 0, 6.10351562500000e-05, 0.000122070312500000, 0.000152587890625000, 0.000152587890625000, 0.000152587890625000, 0.000122070312500000, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000152587890625000, 0.000183105468750000, 0.000152587890625000, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000152587890625000, 0.000183105468750000, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000122070312500000, 0.000122070312500000, 6.10351562500000e-05, 0.000122070312500000, 0.000152587890625000, 0.000213623046875000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000183105468750000, 9.15527343750000e-05, 6.10351562500000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000122070312500000, 0.000152587890625000, 0.000183105468750000, 0.000244140625000000, 0.000305175781250000, 0.000366210937500000, 0.000366210937500000, 0.000335693359375000, 0.000274658203125000, 0.000244140625000000, 0.000244140625000000, 0.000183105468750000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000183105468750000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000213623046875000, 0.000213623046875000, 0.000213623046875000, 0.000244140625000000, 0.000274658203125000, 0.000274658203125000, 0.000274658203125000, 0.000244140625000000, 0.000183105468750000, 0.000152587890625000, 6.10351562500000e-05, 0, 0, -6.10351562500000e-05, -3.05175781250000e-05, 0, 0, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 0, 0, 0, -3.05175781250000e-05, 0, -3.05175781250000e-05, -6.10351562500000e-05, -0.000152587890625000, -0.000152587890625000, -0.000244140625000000, -0.000305175781250000, -0.000366210937500000, -0.000427246093750000, -0.000457763671875000, -0.000488281250000000, -0.000488281250000000, -0.000488281250000000, -0.000396728515625000, -0.000335693359375000, -0.000305175781250000, -0.000335693359375000, -0.000366210937500000, -0.000427246093750000, -0.000488281250000000, -0.000518798828125000, -0.000579833984375000, -0.000610351562500000, -0.000640869140625000, -0.000610351562500000, -0.000579833984375000, -0.000549316406250000, -0.000579833984375000, -0.000549316406250000, -0.000610351562500000, -0.000610351562500000, -0.000671386718750000, -0.000701904296875000, -0.000701904296875000, -0.000732421875000000, -0.000701904296875000, -0.000701904296875000, -0.000701904296875000, -0.000701904296875000, -0.000671386718750000, -0.000701904296875000, -0.000732421875000000, -0.000793457031250000, -0.000854492187500000, -0.000854492187500000, -0.000823974609375000, -0.000762939453125000, -0.000732421875000000, -0.000762939453125000, -0.000732421875000000, -0.000732421875000000, -0.000762939453125000, -0.000762939453125000, -0.000732421875000000, -0.000732421875000000, -0.000671386718750000, -0.000640869140625000, -0.000610351562500000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000549316406250000, -0.000549316406250000, -0.000579833984375000, -0.000610351562500000, -0.000640869140625000, -0.000640869140625000, -0.000640869140625000, -0.000610351562500000, -0.000579833984375000, -0.000549316406250000, -0.000579833984375000, -0.000579833984375000, -0.000549316406250000, -0.000549316406250000, -0.000549316406250000, -0.000488281250000000, -0.000488281250000000, -0.000488281250000000, -0.000457763671875000, -0.000457763671875000, -0.000457763671875000, -0.000427246093750000, -0.000457763671875000, -0.000488281250000000, -0.000549316406250000, -0.000549316406250000, -0.000579833984375000, -0.000549316406250000, -0.000518798828125000, -0.000488281250000000, -0.000488281250000000, -0.000457763671875000, -0.000396728515625000, -0.000335693359375000, -0.000305175781250000, -0.000244140625000000, -0.000213623046875000, -0.000152587890625000, -0.000122070312500000, -9.15527343750000e-05, -9.15527343750000e-05, -0.000152587890625000, -0.000183105468750000, -0.000244140625000000, -0.000244140625000000, -0.000274658203125000, -0.000274658203125000, -0.000274658203125000, -0.000213623046875000, -0.000213623046875000, -0.000152587890625000, -6.10351562500000e-05, 0, 3.05175781250000e-05, 9.15527343750000e-05, 9.15527343750000e-05, 0.000122070312500000, 0.000122070312500000, 9.15527343750000e-05, 9.15527343750000e-05, 6.10351562500000e-05, 6.10351562500000e-05, 3.05175781250000e-05, 0, 0, 3.05175781250000e-05, 6.10351562500000e-05, 0.000122070312500000, 0.000183105468750000, 0.000213623046875000, 0.000274658203125000, 0.000305175781250000, 0.000305175781250000, 0.000335693359375000, 0.000335693359375000, 0.000274658203125000, 0.000305175781250000, 0.000366210937500000, 0.000427246093750000, 0.000427246093750000, 0.000396728515625000, 0.000396728515625000, 0.000366210937500000, 0.000366210937500000, 0.000335693359375000, 0.000305175781250000, 0.000244140625000000, 0.000244140625000000, 0.000244140625000000, 0.000305175781250000, 0.000366210937500000, 0.000427246093750000, 0.000549316406250000, 0.000610351562500000, 0.000610351562500000, 0.000579833984375000, 0.000518798828125000, 0.000518798828125000, 0.000488281250000000, 0.000427246093750000, 0.000427246093750000, 0.000427246093750000, 0.000396728515625000, 0.000427246093750000, 0.000396728515625000, 0.000396728515625000, 0.000366210937500000, 0.000305175781250000, 0.000305175781250000, 0.000305175781250000, 0.000366210937500000, 0.000396728515625000, 0.000396728515625000, 0.000366210937500000, 0.000366210937500000, 0.000366210937500000, 0.000366210937500000, 0.000396728515625000, 0.000396728515625000, 0.000427246093750000, 0.000457763671875000, 0.000488281250000000, 0.000488281250000000, 0.000518798828125000, 0.000518798828125000, 0.000488281250000000, 0.000427246093750000, 0.000335693359375000, 0.000274658203125000, 0.000213623046875000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000183105468750000, 0.000152587890625000, 0.000183105468750000, 0.000152587890625000, 9.15527343750000e-05, 9.15527343750000e-05, 3.05175781250000e-05, 3.05175781250000e-05, 0, 0, 0, -3.05175781250000e-05, -3.05175781250000e-05, -6.10351562500000e-05, -6.10351562500000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -9.15527343750000e-05, -0.000122070312500000, -0.000152587890625000, -0.000122070312500000, -0.000152587890625000, -0.000183105468750000, -0.000183105468750000, -0.000213623046875000, -0.000183105468750000, -0.000213623046875000, -0.000152587890625000, -9.15527343750000e-05, -0.000122070312500000, -9.15527343750000e-05, -0.000122070312500000, -0.000152587890625000, -0.000183105468750000, -0.000244140625000000, -0.000305175781250000, -0.000335693359375000, -0.000305175781250000, -0.000274658203125000, -0.000244140625000000, -0.000244140625000000, -0.000244140625000000, -0.000213623046875000, -0.000244140625000000, -0.000244140625000000, -0.000274658203125000, -0.000274658203125000, -0.000274658203125000, -0.000274658203125000, -0.000366210937500000, -0.000396728515625000, -0.000427246093750000, -0.000396728515625000, -0.000366210937500000, -0.000396728515625000, -0.000396728515625000, -0.000427246093750000, -0.000457763671875000, -0.000488281250000000, -0.000518798828125000, -0.000579833984375000, -0.000610351562500000, -0.000640869140625000, -0.000671386718750000, -0.000671386718750000, -0.000732421875000000, -0.000762939453125000, -0.000732421875000000, -0.000701904296875000, -0.000610351562500000, -0.000579833984375000, -0.000579833984375000, -0.000579833984375000, -0.000610351562500000, -0.000701904296875000, -0.000762939453125000, -0.000823974609375000, -0.000915527343750000, -0.000946044921875000, -0.000946044921875000, -0.000915527343750000, -0.000885009765625000, -0.000885009765625000, -0.000854492187500000};

    const int buffer_size = samples * channels * fmt_size; 

    cout << "======================" << endl;
    cout << "frames_per_period: " << frames_per_period << endl;
    cout << "period_size: " << period_size << endl;
    cout << "channels: " << channels << endl;
    cout << "buffer_size: " << buffer_size << endl;
    cout << "======================" << endl;

    int frames_read = 0;
    while (true) {
        float *buffer = new float[buffer_size];
        frames_read = snd_pcm_readi(pcm_handle, buffer, samples);
        if (frames_read == -EPIPE) {
            //q: 为什么每读取4次就会出现溢出？
            //a: 
            // cout << "错误：PCM设备发生了溢出。" << endl;
            snd_pcm_prepare(pcm_handle);
            continue;
        } else if (frames_read < 0) {
            cout << "错误：无法从PCM设备读取数据。" << endl;
            continue;
        } else if (frames_read != samples) {
            cout << "错误：从PCM设备读取的数据不完整。" << endl;
            continue;
        }

        // if (snd_pcm_readi(pcm_handle, buf, period_size) != period_size) {
        //     cerr << "错误：无法读取数据。" << endl;
        //     snd_pcm_prepare(pcm_handle);
        // } else {

        // cout << "读取数据成功。" << endl;
        // for (int i = 0; i < channels_size; i++) {
        //     cout << buffer[i] << " ";
        // }

        // 此时 buffer 中存储的就是麦克风阵列采集到的声音数据
        // 步骤1: 分离声道
        double *data1 = new double[samples];
        double *data2 = new double[samples];
        double *data3 = new double[samples];
        double *data4 = new double[samples];
        double *data5 = new double[samples];
        double *data6 = new double[samples];
        double *data7 = new double[samples];

        for (int i = 0; i < samples; i++) {
            data1[i] = buffer[i * channels];
            data2[i] = buffer[i * channels + 1];
            data3[i] = buffer[i * channels + 2];
            data4[i] = buffer[i * channels + 3];
            data5[i] = buffer[i * channels + 4];
            data6[i] = buffer[i * channels + 5];
            data7[i] = buffer[i * channels + 6];
        }
        // for (int i = 0; i < channels_size; i++) {
        //     cout << data1[i] << " ";
        // }

        // 将分离的声道数据存储到一个二维数组中
        // short **frames = new short *[channels];
        // frames[0] = data1;
        // frames[1] = data2;
        // frames[2] = data3;
        // frames[3] = data4;
        // frames[4] = data5;
        // frames[5] = data6;
        // frames[6] = data7;


        // 计算声源定位
        // 步骤2: 分帧加窗
        // channels_size = 400;
        int frame_length = 1200;                                // 帧长
        int overlap = 400;                                      // 帧移
        int step_length = frame_length - overlap;               // 步长
        int frame_num = (samples - overlap) / step_length;// 帧数
        double **frames_enframe1 = new double *[frame_num];
        double **frames_enframe2 = new double *[frame_num];
        double **frames_enframe3 = new double *[frame_num];
        double **frames_enframe4 = new double *[frame_num];
        double **frames_enframe5 = new double *[frame_num];
        double **frames_enframe6 = new double *[frame_num];
        double **frames_enframe7 = new double *[frame_num];
        for (int i = 0; i < frame_num; i++) {
            frames_enframe1[i] = new double[frame_length];
            frames_enframe2[i] = new double[frame_length];
            frames_enframe3[i] = new double[frame_length];
            frames_enframe4[i] = new double[frame_length];
            frames_enframe5[i] = new double[frame_length];
            frames_enframe6[i] = new double[frame_length];
            frames_enframe7[i] = new double[frame_length];
        }
        // 将分帧后的数据存储到 frames_enframe 数组中
        enframeChannel(data1, samples, frame_length, overlap, frames_enframe1);
        enframeChannel(data2, samples, frame_length, overlap, frames_enframe2);
        enframeChannel(data3, samples, frame_length, overlap, frames_enframe3);
        enframeChannel(data4, samples, frame_length, overlap, frames_enframe4);
        enframeChannel(data5, samples, frame_length, overlap, frames_enframe5);
        enframeChannel(data6, samples, frame_length, overlap, frames_enframe6);
        enframeChannel(data7, samples, frame_length, overlap, frames_enframe7);

        // for (int i = 0; i < frame_num; i++) {
        //     for (int j = 0; j < frame_length; j++) {
        //          cout << frames_enframe2[i][j] << " ";
        //     }
        //     cout << endl;
        // }    //DONE!!!


        // 步骤3: 计算GCC-PHAT
        int cac_length = 2 * frame_length - 1;
        // int ncorr = 2 * frame_length - 1;
        // int nfft = nextpow2(ncorr);
        // int cac_length = (nfft / 2 + 1 + (ncorr - 1) / 2) - (nfft / 2 + 1 - (ncorr - 1) / 2) + 1;
        Eigen::MatrixXd xcorr_cac12(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac13(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac14(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac15(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac16(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac17(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac23(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac24(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac25(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac26(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac27(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac34(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac35(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac36(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac37(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac45(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac46(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac47(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac56(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac57(cac_length, frame_num);
        Eigen::MatrixXd xcorr_cac67(cac_length, frame_num);
        // vector<vector<complex<double>>> xcorr_cac13(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac14(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac15(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac16(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac17(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac23(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac24(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac25(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac26(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac27(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac34(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac35(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac36(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac37(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac45(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac46(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac47(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac56(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac57(frame_num, vector<complex<double>>(2 * frame_length - 1));
        // vector<vector<complex<double>>> xcorr_cac67(frame_num, vector<complex<double>>(2 * frame_length - 1));


        // cout << "cols: " << xcorr_cac12.cols() << endl;
        for (int i = 0; i < frame_num; i++) {
            gccPhat(frames_enframe1[i], frames_enframe2[i], frame_length, xcorr_cac12.col(i));
            gccPhat(frames_enframe1[i], frames_enframe3[i], frame_length, xcorr_cac13.col(i));
            gccPhat(frames_enframe1[i], frames_enframe4[i], frame_length, xcorr_cac14.col(i));
            gccPhat(frames_enframe1[i], frames_enframe5[i], frame_length, xcorr_cac15.col(i));
            gccPhat(frames_enframe1[i], frames_enframe6[i], frame_length, xcorr_cac16.col(i));
            gccPhat(frames_enframe1[i], frames_enframe7[i], frame_length, xcorr_cac17.col(i));
            gccPhat(frames_enframe2[i], frames_enframe3[i], frame_length, xcorr_cac23.col(i));
            gccPhat(frames_enframe2[i], frames_enframe4[i], frame_length, xcorr_cac24.col(i));
            gccPhat(frames_enframe2[i], frames_enframe5[i], frame_length, xcorr_cac25.col(i));
            gccPhat(frames_enframe2[i], frames_enframe6[i], frame_length, xcorr_cac26.col(i));
            gccPhat(frames_enframe2[i], frames_enframe7[i], frame_length, xcorr_cac27.col(i));
            gccPhat(frames_enframe3[i], frames_enframe4[i], frame_length, xcorr_cac34.col(i));
            gccPhat(frames_enframe3[i], frames_enframe5[i], frame_length, xcorr_cac35.col(i));
            gccPhat(frames_enframe3[i], frames_enframe6[i], frame_length, xcorr_cac36.col(i));
            gccPhat(frames_enframe3[i], frames_enframe7[i], frame_length, xcorr_cac37.col(i));
            gccPhat(frames_enframe4[i], frames_enframe5[i], frame_length, xcorr_cac45.col(i));
            gccPhat(frames_enframe4[i], frames_enframe6[i], frame_length, xcorr_cac46.col(i));
            gccPhat(frames_enframe4[i], frames_enframe7[i], frame_length, xcorr_cac47.col(i));
            gccPhat(frames_enframe5[i], frames_enframe6[i], frame_length, xcorr_cac56.col(i));
            gccPhat(frames_enframe5[i], frames_enframe7[i], frame_length, xcorr_cac57.col(i));
            gccPhat(frames_enframe6[i], frames_enframe7[i], frame_length, xcorr_cac67.col(i));
        }

        // 输出 xcorr_cac12
        // cout << "xcorr_cac12: " << endl;
        // for (int i = 0; i < frame_num; i++) {
        //     for (int j = 0; j < 2 * frame_length - 1; j++) {
        //         cout << xcorr_cac12(j, i) << " ";
        //     }
        //     cout << endl;
        // }// DONE!!! ///YESYESYES！！！

        Eigen::VectorXd xcorr12 = xcorr_cac12.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr13 = xcorr_cac13.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr14 = xcorr_cac14.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr15 = xcorr_cac15.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr16 = xcorr_cac16.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr17 = xcorr_cac17.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr23 = xcorr_cac23.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr24 = xcorr_cac24.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr25 = xcorr_cac25.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr26 = xcorr_cac26.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr27 = xcorr_cac27.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr34 = xcorr_cac34.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr35 = xcorr_cac35.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr36 = xcorr_cac36.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr37 = xcorr_cac37.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr45 = xcorr_cac45.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr46 = xcorr_cac46.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr47 = xcorr_cac47.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr56 = xcorr_cac56.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr57 = xcorr_cac57.rowwise().sum().cwiseAbs();
        Eigen::VectorXd xcorr67 = xcorr_cac67.rowwise().sum().cwiseAbs();
        //cout << xcorr12 << endl;    //YESYESYES！！！

        // Eigen::VectorXd xcorr13(2 * frame_length - 1);
        // Eigen::VectorXd xcorr14(2 * frame_length - 1);
        // Eigen::VectorXd xcorr15(2 * frame_length - 1);
        // Eigen::VectorXd xcorr16(2 * frame_length - 1);
        // Eigen::VectorXd xcorr17(2 * frame_length - 1);
        // Eigen::VectorXd xcorr23(2 * frame_length - 1);
        // Eigen::VectorXd xcorr24(2 * frame_length - 1);
        // Eigen::VectorXd xcorr25(2 * frame_length - 1);
        // Eigen::VectorXd xcorr26(2 * frame_length - 1);
        // Eigen::VectorXd xcorr27(2 * frame_length - 1);
        // Eigen::VectorXd xcorr34(2 * frame_length - 1);
        // Eigen::VectorXd xcorr35(2 * frame_length - 1);
        // Eigen::VectorXd xcorr36(2 * frame_length - 1);
        // Eigen::VectorXd xcorr37(2 * frame_length - 1);
        // Eigen::VectorXd xcorr45(2 * frame_length - 1);
        // Eigen::VectorXd xcorr46(2 * frame_length - 1);
        // Eigen::VectorXd xcorr47(2 * frame_length - 1);
        // Eigen::VectorXd xcorr56(2 * frame_length - 1);
        // Eigen::VectorXd xcorr57(2 * frame_length - 1);
        // Eigen::VectorXd xcorr67(2 * frame_length - 1);
        //计算xcorr_cac每一列的和的abs


        // for (int i = 0; i < frame_num; i++) {
        //     for (int j = 0; j < 2 * frame_length - 1; j++) {
        //         xcorr12[j] += abs(xcorr_cac12[i][j]);
        //         xcorr13[j] += abs(xcorr_cac13[i][j]);
        //         xcorr14[j] += abs(xcorr_cac14[i][j]);
        //         xcorr15[j] += abs(xcorr_cac15[i][j]);
        //         xcorr16[j] += abs(xcorr_cac16[i][j]);
        //         xcorr17[j] += abs(xcorr_cac17[i][j]);
        //         xcorr23[j] += abs(xcorr_cac23[i][j]);
        //         xcorr24[j] += abs(xcorr_cac24[i][j]);
        //         xcorr25[j] += abs(xcorr_cac25[i][j]);
        //         xcorr26[j] += abs(xcorr_cac26[i][j]);
        //         xcorr27[j] += abs(xcorr_cac27[i][j]);
        //         xcorr34[j] += abs(xcorr_cac34[i][j]);
        //         xcorr35[j] += abs(xcorr_cac35[i][j]);
        //         xcorr36[j] += abs(xcorr_cac36[i][j]);
        //         xcorr37[j] += abs(xcorr_cac37[i][j]);
        //         xcorr45[j] += abs(xcorr_cac45[i][j]);
        //         xcorr46[j] += abs(xcorr_cac46[i][j]);
        //         xcorr47[j] += abs(xcorr_cac47[i][j]);
        //         xcorr56[j] += abs(xcorr_cac56[i][j]);
        //         xcorr57[j] += abs(xcorr_cac57[i][j]);
        //         xcorr67[j] += abs(xcorr_cac67[i][j]);
        //     }
        // }//对啦

        // vector<vector<double>> gcc_all(21);
        // gcc_all[0] = xcorr12;
        // gcc_all[1] = xcorr13;
        // gcc_all[2] = xcorr14;
        // gcc_all[3] = xcorr15;
        // gcc_all[4] = xcorr16;
        // gcc_all[5] = xcorr17;
        // gcc_all[6] = xcorr23;
        // gcc_all[7] = xcorr24;
        // gcc_all[8] = xcorr25;
        // gcc_all[9] = xcorr26;
        // gcc_all[10] = xcorr27;
        // gcc_all[11] = xcorr34;
        // gcc_all[12] = xcorr35;
        // gcc_all[13] = xcorr36;
        // gcc_all[14] = xcorr37;
        // gcc_all[15] = xcorr45;
        // gcc_all[16] = xcorr46;
        // gcc_all[17] = xcorr47;
        // gcc_all[18] = xcorr56;
        // gcc_all[19] = xcorr57;
        // gcc_all[20] = xcorr67;

        // eigen 的gcc_all
        vector<Eigen::VectorXd> gcc_all(21);
        gcc_all[0] = xcorr12;
        gcc_all[1] = xcorr13;
        gcc_all[2] = xcorr14;
        gcc_all[3] = xcorr15;
        gcc_all[4] = xcorr16;
        gcc_all[5] = xcorr17;
        gcc_all[6] = xcorr23;
        gcc_all[7] = xcorr24;
        gcc_all[8] = xcorr25;
        gcc_all[9] = xcorr26;
        gcc_all[10] = xcorr27;
        gcc_all[11] = xcorr34;
        gcc_all[12] = xcorr35;
        gcc_all[13] = xcorr36;
        gcc_all[14] = xcorr37;
        gcc_all[15] = xcorr45;
        gcc_all[16] = xcorr46;
        gcc_all[17] = xcorr47;
        gcc_all[18] = xcorr56;
        gcc_all[19] = xcorr57;
        gcc_all[20] = xcorr67;

        int gcc_length = xcorr12.size();
        double frame_len = (gcc_length + 1) / 2;
        double delayPointMax[21];
        int inter_points = 20;
        int inter_radius = 20;
        for (int i = 0; i < 21; i++) {
            delayPointMax[i] = 0;
        }
        for (int i = 0; i < 21; i++) {
            // vector<double> gcc_cac = gcc_all[i];
            // int max_index = distance(gcc_cac.begin(), max_element(gcc_cac.begin(), gcc_cac.end()));
            Eigen::VectorXd gcc_cac = gcc_all[i];
            Eigen::VectorXd::Index max_index;
            gcc_cac.maxCoeff(&max_index);

            // cout << "max_index: " << max_index << endl;
            // cout << "frame_len: " << frame_len << endl;

            // while (max_index == frame_len || max_index >= 2399 - inter_radius || max_index <= inter_radius + 1) {
            //     cout << "max_index: " << max_index << endl;
            //     max_index = distance(gcc_cac.begin(), max_element(gcc_cac.begin(), gcc_cac.end()));
            // }
            while (max_index + 1 == frame_len || max_index >= 2398 - inter_radius || max_index <= inter_radius) {
                gcc_cac(max_index) = 0;
                gcc_cac.maxCoeff(&max_index);
            }
            // cout << "max_index: " << max_index << endl;

            // Eigen::VectorXd input_time = Eigen::VectorXd::LinSpaced(inter_radius * 2 + 1, max_index - inter_radius, max_index + inter_radius);
            int start = max_index - inter_radius + 1;
            int end = max_index + inter_radius + 1;
            Eigen::VectorXd input_time = Eigen::VectorXd::LinSpaced(end - start + 1, start, end);
            Eigen::VectorXd input_signal = gcc_cac.segment(start - 1, end - start + 1);

            // vector<int> inter_time(2 * inter_radius + 1);
            // Eigen::VectorXd input_time(2 * inter_radius + 1);
            // for (int j = 0; j < 2 * inter_radius + 1; j++) {
            //     inter_time[j] = max_index - inter_radius + j;
            // }

            // vector<double> inter_signal(2 * inter_radius + 1);
            // Eigen::VectorXd input_signal(2 * inter_radius + 1);
            // for (int j = 0; j < 2 * inter_radius + 1; j++) {
            //     inter_signal[j] = gcc_cac[inter_time[j]];
            // }


            int n_length = input_time.size();                // 原始信号的长度
            int N = n_length + inter_points * (n_length - 1);// 总点数
            Eigen::VectorXd output_signal(N);
            Eigen::VectorXd output_time(N);

            sinc_interp(input_signal, input_time, inter_points, output_signal, output_time);

            // cout << "output_signal: " << endl;
            // for (int j = 0; j < N; j++) {
            //     cout << output_signal[j] << " ";
            // }    //YESYESYES！！！

            // int max_index2 = distance(output_signal.begin(), max_element(output_signal.begin(), output_signal.end()));
            int max_index2;
            output_signal.maxCoeff(&max_index2);

            delayPointMax[i] = output_time[max_index2];
            // cout << "output_time: " << output_time[max_index2] << endl;
        }

        Eigen::VectorXd delay_ref(21);
        delay_ref << delayPointMax[0] - frame_len, delayPointMax[1] - frame_len, delayPointMax[2] - frame_len,
                delayPointMax[3] - frame_len, delayPointMax[4] - frame_len, delayPointMax[5] - frame_len,
                delayPointMax[6] - frame_len, delayPointMax[7] - frame_len, delayPointMax[8] - frame_len,
                delayPointMax[9] - frame_len, delayPointMax[10] - frame_len, delayPointMax[11] - frame_len,
                delayPointMax[12] - frame_len, delayPointMax[13] - frame_len, delayPointMax[14] - frame_len,
                delayPointMax[15] - frame_len, delayPointMax[16] - frame_len, delayPointMax[17] - frame_len,
                delayPointMax[18] - frame_len, delayPointMax[19] - frame_len, delayPointMax[20] - frame_len;

        //cout << delay_ref << endl;  //YESYESYES！！！

        Eigen::Vector3d obj(1, 1, 1);

        double alpha = 0.005;
        double error_thresh = 1e-1;
        int number = 0;
        int number_thresh = 500;
        double error = 100;
        Eigen::MatrixXd factor_matrix(21, 7);
        factor_matrix << 1, -1, 0, 0, 0, 0, 0,
                1, 0, -1, 0, 0, 0, 0,
                1, 0, 0, -1, 0, 0, 0,
                1, 0, 0, 0, -1, 0, 0,
                1, 0, 0, 0, 0, -1, 0,
                1, 0, 0, 0, 0, 0, -1,
                0, 1, -1, 0, 0, 0, 0,
                0, 1, 0, -1, 0, 0, 0,
                0, 1, 0, 0, -1, 0, 0,
                0, 1, 0, 0, 0, -1, 0,
                0, 1, 0, 0, 0, 0, -1,
                0, 0, 1, -1, 0, 0, 0,
                0, 0, 1, 0, -1, 0, 0,
                0, 0, 1, 0, 0, -1, 0,
                0, 0, 1, 0, 0, 0, -1,
                0, 0, 0, 1, -1, 0, 0,
                0, 0, 0, 1, 0, -1, 0,
                0, 0, 0, 1, 0, 0, -1,
                0, 0, 0, 0, 1, -1, 0,
                0, 0, 0, 0, 1, 0, -1,
                0, 0, 0, 0, 0, 1, -1;

        Eigen::Matrix<double, 7, 3> mic;
        mic << 0, 0, 0,
                0, 0.04, 0,
                0.034641, 0.02, 0,
                0.034641, -0.02, 0,
                0, -0.04, 0,
                -0.034641, -0.02, 0,
                -0.034641, 0.02, 0;

        double v = 340;


        // 梯度下降法
        while (error > error_thresh && number < number_thresh) {// 当误差或次数达到门限的时候退出
            Eigen::VectorXd range = (mic.rowwise() - obj.transpose()).rowwise().norm();
            Eigen::VectorXd delay = factor_matrix * range * 2 / v * sample_rate;
            error = (delay - delay_ref).array().square().sum();
            Eigen::MatrixXd range_gradient = (obj.transpose().colwise().replicate(7) - mic).array().colwise() / range.array();
            Eigen::MatrixXd delay_gradient = factor_matrix * range_gradient;
            Eigen::MatrixXd delay_error = (delay - delay_ref).rowwise().replicate(3);
            Eigen::VectorXd error_gradient = (delay_gradient.array() * delay_error.array()).colwise().sum() * 4 * sample_rate / v;
            obj -= alpha * error_gradient.transpose();
            number++;
        }

        cout << "obj: " << obj[0] << " " << obj[1] << " " << obj[2] << endl;//YESYESYES！！！
        //结果格式：x y z
        //          ^ y
        //          |
        //          |
        //          |
        // -------Kinect-------> x
        //          |
        //          |
        //          |

        delete[] data1;
        delete[] data2;
        delete[] data3;
        delete[] data4;
        delete[] data5;
        delete[] data6;
        delete[] data7;
    }

    snd_pcm_close(pcm_handle);

    return;
}
