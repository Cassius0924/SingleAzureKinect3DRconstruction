// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataMessage.proto

#include "DataMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cas {
namespace proto {
constexpr DataMessage::DataMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , _oneof_case_{}{}
struct DataMessageDefaultTypeInternal {
  constexpr DataMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMessageDefaultTypeInternal() {}
  union {
    DataMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMessageDefaultTypeInternal _DataMessage_default_instance_;
}  // namespace proto
}  // namespace cas
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DataMessage_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DataMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DataMessage_2eproto = nullptr;

const uint32_t TableStruct_DataMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cas::proto::DataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cas::proto::DataMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cas::proto::DataMessage, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::cas::proto::DataMessage, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cas::proto::DataMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cas::proto::_DataMessage_default_instance_),
};

const char descriptor_table_protodef_DataMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021DataMessage.proto\022\tcas.proto\032\nMesh.pro"
  "to\032\021SoundSource.proto\032\021Temperature.proto"
  "\032\014BotCar.proto\032\020BotGripper.proto\032\016BotMot"
  "or.proto\"\240\003\n\013DataMessage\022)\n\004type\030\001 \001(\0162\033"
  ".cas.proto.DataMessage.Type\022\037\n\004mesh\030\002 \001("
  "\0132\017.cas.proto.MeshH\000\022.\n\014sound_source\030\003 \001"
  "(\0132\026.cas.proto.SoundSourceH\000\022-\n\013temperat"
  "ure\030\004 \001(\0132\026.cas.proto.TemperatureH\000\022$\n\007b"
  "ot_car\030\005 \001(\0132\021.cas.proto.BotCarH\000\022,\n\013bot"
  "_gripper\030\006 \001(\0132\025.cas.proto.BotGripperH\000\022"
  "(\n\tbot_motor\030\007 \001(\0132\023.cas.proto.BotMotorH"
  "\000\"`\n\004Type\022\010\n\004MESH\020\000\022\020\n\014SOUND_SOURCE\020\001\022\017\n"
  "\013TEMPERATURE\020\002\022\013\n\007BOT_CAR\020\003\022\017\n\013BOT_GRIPP"
  "ER\020\004\022\r\n\tBOT_MOTOR\020\005B\006\n\004datab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DataMessage_2eproto_deps[6] = {
  &::descriptor_table_BotCar_2eproto,
  &::descriptor_table_BotGripper_2eproto,
  &::descriptor_table_BotMotor_2eproto,
  &::descriptor_table_Mesh_2eproto,
  &::descriptor_table_SoundSource_2eproto,
  &::descriptor_table_Temperature_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DataMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DataMessage_2eproto = {
  false, false, 555, descriptor_table_protodef_DataMessage_2eproto, "DataMessage.proto", 
  &descriptor_table_DataMessage_2eproto_once, descriptor_table_DataMessage_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_DataMessage_2eproto::offsets,
  file_level_metadata_DataMessage_2eproto, file_level_enum_descriptors_DataMessage_2eproto, file_level_service_descriptors_DataMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_DataMessage_2eproto_getter() {
  return &descriptor_table_DataMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_DataMessage_2eproto(&descriptor_table_DataMessage_2eproto);
namespace cas {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DataMessage_2eproto);
  return file_level_enum_descriptors_DataMessage_2eproto[0];
}
bool DataMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataMessage_Type DataMessage::MESH;
constexpr DataMessage_Type DataMessage::SOUND_SOURCE;
constexpr DataMessage_Type DataMessage::TEMPERATURE;
constexpr DataMessage_Type DataMessage::BOT_CAR;
constexpr DataMessage_Type DataMessage::BOT_GRIPPER;
constexpr DataMessage_Type DataMessage::BOT_MOTOR;
constexpr DataMessage_Type DataMessage::Type_MIN;
constexpr DataMessage_Type DataMessage::Type_MAX;
constexpr int DataMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DataMessage::_Internal {
 public:
  static const ::cas::proto::Mesh& mesh(const DataMessage* msg);
  static const ::cas::proto::SoundSource& sound_source(const DataMessage* msg);
  static const ::cas::proto::Temperature& temperature(const DataMessage* msg);
  static const ::cas::proto::BotCar& bot_car(const DataMessage* msg);
  static const ::cas::proto::BotGripper& bot_gripper(const DataMessage* msg);
  static const ::cas::proto::BotMotor& bot_motor(const DataMessage* msg);
};

const ::cas::proto::Mesh&
DataMessage::_Internal::mesh(const DataMessage* msg) {
  return *msg->data_.mesh_;
}
const ::cas::proto::SoundSource&
DataMessage::_Internal::sound_source(const DataMessage* msg) {
  return *msg->data_.sound_source_;
}
const ::cas::proto::Temperature&
DataMessage::_Internal::temperature(const DataMessage* msg) {
  return *msg->data_.temperature_;
}
const ::cas::proto::BotCar&
DataMessage::_Internal::bot_car(const DataMessage* msg) {
  return *msg->data_.bot_car_;
}
const ::cas::proto::BotGripper&
DataMessage::_Internal::bot_gripper(const DataMessage* msg) {
  return *msg->data_.bot_gripper_;
}
const ::cas::proto::BotMotor&
DataMessage::_Internal::bot_motor(const DataMessage* msg) {
  return *msg->data_.bot_motor_;
}
void DataMessage::set_allocated_mesh(::cas::proto::Mesh* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh));
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    set_has_mesh();
    data_.mesh_ = mesh;
  }
  // @@protoc_insertion_point(field_set_allocated:cas.proto.DataMessage.mesh)
}
void DataMessage::clear_mesh() {
  if (_internal_has_mesh()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.mesh_;
    }
    clear_has_data();
  }
}
void DataMessage::set_allocated_sound_source(::cas::proto::SoundSource* sound_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (sound_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sound_source));
    if (message_arena != submessage_arena) {
      sound_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sound_source, submessage_arena);
    }
    set_has_sound_source();
    data_.sound_source_ = sound_source;
  }
  // @@protoc_insertion_point(field_set_allocated:cas.proto.DataMessage.sound_source)
}
void DataMessage::clear_sound_source() {
  if (_internal_has_sound_source()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.sound_source_;
    }
    clear_has_data();
  }
}
void DataMessage::set_allocated_temperature(::cas::proto::Temperature* temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temperature));
    if (message_arena != submessage_arena) {
      temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    set_has_temperature();
    data_.temperature_ = temperature;
  }
  // @@protoc_insertion_point(field_set_allocated:cas.proto.DataMessage.temperature)
}
void DataMessage::clear_temperature() {
  if (_internal_has_temperature()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.temperature_;
    }
    clear_has_data();
  }
}
void DataMessage::set_allocated_bot_car(::cas::proto::BotCar* bot_car) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (bot_car) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_car));
    if (message_arena != submessage_arena) {
      bot_car = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_car, submessage_arena);
    }
    set_has_bot_car();
    data_.bot_car_ = bot_car;
  }
  // @@protoc_insertion_point(field_set_allocated:cas.proto.DataMessage.bot_car)
}
void DataMessage::clear_bot_car() {
  if (_internal_has_bot_car()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.bot_car_;
    }
    clear_has_data();
  }
}
void DataMessage::set_allocated_bot_gripper(::cas::proto::BotGripper* bot_gripper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (bot_gripper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_gripper));
    if (message_arena != submessage_arena) {
      bot_gripper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_gripper, submessage_arena);
    }
    set_has_bot_gripper();
    data_.bot_gripper_ = bot_gripper;
  }
  // @@protoc_insertion_point(field_set_allocated:cas.proto.DataMessage.bot_gripper)
}
void DataMessage::clear_bot_gripper() {
  if (_internal_has_bot_gripper()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.bot_gripper_;
    }
    clear_has_data();
  }
}
void DataMessage::set_allocated_bot_motor(::cas::proto::BotMotor* bot_motor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (bot_motor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_motor));
    if (message_arena != submessage_arena) {
      bot_motor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_motor, submessage_arena);
    }
    set_has_bot_motor();
    data_.bot_motor_ = bot_motor;
  }
  // @@protoc_insertion_point(field_set_allocated:cas.proto.DataMessage.bot_motor)
}
void DataMessage::clear_bot_motor() {
  if (_internal_has_bot_motor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.bot_motor_;
    }
    clear_has_data();
  }
}
DataMessage::DataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cas.proto.DataMessage)
}
DataMessage::DataMessage(const DataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_data();
  switch (from.data_case()) {
    case kMesh: {
      _internal_mutable_mesh()->::cas::proto::Mesh::MergeFrom(from._internal_mesh());
      break;
    }
    case kSoundSource: {
      _internal_mutable_sound_source()->::cas::proto::SoundSource::MergeFrom(from._internal_sound_source());
      break;
    }
    case kTemperature: {
      _internal_mutable_temperature()->::cas::proto::Temperature::MergeFrom(from._internal_temperature());
      break;
    }
    case kBotCar: {
      _internal_mutable_bot_car()->::cas::proto::BotCar::MergeFrom(from._internal_bot_car());
      break;
    }
    case kBotGripper: {
      _internal_mutable_bot_gripper()->::cas::proto::BotGripper::MergeFrom(from._internal_bot_gripper());
      break;
    }
    case kBotMotor: {
      _internal_mutable_bot_motor()->::cas::proto::BotMotor::MergeFrom(from._internal_bot_motor());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cas.proto.DataMessage)
}

inline void DataMessage::SharedCtor() {
type_ = 0;
clear_has_data();
}

DataMessage::~DataMessage() {
  // @@protoc_insertion_point(destructor:cas.proto.DataMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void DataMessage::ArenaDtor(void* object) {
  DataMessage* _this = reinterpret_cast< DataMessage* >(object);
  (void)_this;
}
void DataMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMessage::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:cas.proto.DataMessage)
  switch (data_case()) {
    case kMesh: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.mesh_;
      }
      break;
    }
    case kSoundSource: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.sound_source_;
      }
      break;
    }
    case kTemperature: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.temperature_;
      }
      break;
    }
    case kBotCar: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.bot_car_;
      }
      break;
    }
    case kBotGripper: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.bot_gripper_;
      }
      break;
    }
    case kBotMotor: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.bot_motor_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void DataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cas.proto.DataMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cas.proto.DataMessage.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cas::proto::DataMessage_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .cas.proto.Mesh mesh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cas.proto.SoundSource sound_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sound_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cas.proto.Temperature temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_temperature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cas.proto.BotCar bot_car = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_car(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cas.proto.BotGripper bot_gripper = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_gripper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cas.proto.BotMotor bot_motor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_motor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cas.proto.DataMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cas.proto.DataMessage.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .cas.proto.Mesh mesh = 2;
  if (_internal_has_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mesh(this), target, stream);
  }

  // .cas.proto.SoundSource sound_source = 3;
  if (_internal_has_sound_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sound_source(this), target, stream);
  }

  // .cas.proto.Temperature temperature = 4;
  if (_internal_has_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::temperature(this), target, stream);
  }

  // .cas.proto.BotCar bot_car = 5;
  if (_internal_has_bot_car()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bot_car(this), target, stream);
  }

  // .cas.proto.BotGripper bot_gripper = 6;
  if (_internal_has_bot_gripper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bot_gripper(this), target, stream);
  }

  // .cas.proto.BotMotor bot_motor = 7;
  if (_internal_has_bot_motor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bot_motor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cas.proto.DataMessage)
  return target;
}

size_t DataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cas.proto.DataMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cas.proto.DataMessage.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (data_case()) {
    // .cas.proto.Mesh mesh = 2;
    case kMesh: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.mesh_);
      break;
    }
    // .cas.proto.SoundSource sound_source = 3;
    case kSoundSource: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.sound_source_);
      break;
    }
    // .cas.proto.Temperature temperature = 4;
    case kTemperature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.temperature_);
      break;
    }
    // .cas.proto.BotCar bot_car = 5;
    case kBotCar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.bot_car_);
      break;
    }
    // .cas.proto.BotGripper bot_gripper = 6;
    case kBotGripper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.bot_gripper_);
      break;
    }
    // .cas.proto.BotMotor bot_motor = 7;
    case kBotMotor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.bot_motor_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMessage::GetClassData() const { return &_class_data_; }

void DataMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataMessage *>(to)->MergeFrom(
      static_cast<const DataMessage &>(from));
}


void DataMessage::MergeFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cas.proto.DataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.data_case()) {
    case kMesh: {
      _internal_mutable_mesh()->::cas::proto::Mesh::MergeFrom(from._internal_mesh());
      break;
    }
    case kSoundSource: {
      _internal_mutable_sound_source()->::cas::proto::SoundSource::MergeFrom(from._internal_sound_source());
      break;
    }
    case kTemperature: {
      _internal_mutable_temperature()->::cas::proto::Temperature::MergeFrom(from._internal_temperature());
      break;
    }
    case kBotCar: {
      _internal_mutable_bot_car()->::cas::proto::BotCar::MergeFrom(from._internal_bot_car());
      break;
    }
    case kBotGripper: {
      _internal_mutable_bot_gripper()->::cas::proto::BotGripper::MergeFrom(from._internal_bot_gripper());
      break;
    }
    case kBotMotor: {
      _internal_mutable_bot_motor()->::cas::proto::BotMotor::MergeFrom(from._internal_bot_motor());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMessage::CopyFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cas.proto.DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {
  return true;
}

void DataMessage::InternalSwap(DataMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DataMessage_2eproto_getter, &descriptor_table_DataMessage_2eproto_once,
      file_level_metadata_DataMessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cas
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cas::proto::DataMessage* Arena::CreateMaybeMessage< ::cas::proto::DataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cas::proto::DataMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
